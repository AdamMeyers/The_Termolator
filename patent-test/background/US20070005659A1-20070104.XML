<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE us-patent-application SYSTEM "us-patent-application-v42-2006-08-23.dtd" [ ]>
<us-patent-application lang="EN" dtd-version="v4.2 2006-08-23" file="US20070005659A1-20070104.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20061221" date-publ="20070104">
<us-bibliographic-data-application lang="EN" country="US">
<publication-reference>
<document-id>
<country>US</country>
<doc-number>20070005659</doc-number>
<kind>A1</kind>
<date>20070104</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>11325016</doc-number>
<date>20060103</date>
</document-id>
</application-reference>
<us-application-series-code>11</us-application-series-code>
<priority-claims>
<priority-claim sequence="01" kind="national">
<country>JP</country>
<doc-number>2005-189158</doc-number>
<date>20050629</date>
</priority-claim>
</priority-claims>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>17</main-group>
<subgroup>30</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20070104</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>707200000</main-classification>
</classification-national>
<invention-title id="d0e117">Data deletion method, storage device, and computer system</invention-title>
<parties>
<applicants>
<applicant sequence="00" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Lemoal</last-name>
<first-name>Damien</first-name>
<address>
<city>Sagamihara</city>
<country>JP</country>
</address>
</addressbook>
<nationality>
<country>JP</country>
</nationality>
<residence>
<country>JP</country>
</residence>
</applicant>
<applicant sequence="01" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Mizutani</last-name>
<first-name>Mika</first-name>
<address>
<city>Tokyo</city>
<country>JP</country>
</address>
</addressbook>
<nationality>
<country>JP</country>
</nationality>
<residence>
<country>JP</country>
</residence>
</applicant>
</applicants>
<correspondence-address>
<addressbook>
<name>TOWNSEND AND TOWNSEND AND CREW, LLP</name>
<address>
<address-1>TWO EMBARCADERO CENTER</address-1>
<address-2>EIGHTH FLOOR</address-2>
<city>SAN FRANCISCO</city>
<state>CA</state>
<postcode>94111-3834</postcode>
<country>US</country>
</address>
</addressbook>
</correspondence-address>
</parties>
<assignees>
<assignee>
<addressbook>
<orgname>Hitachi, Ltd.</orgname>
<role>03</role>
<address>
<city>Tokyo</city>
<country>JP</country>
</address>
</addressbook>
</assignee>
</assignees>
</us-bibliographic-data-application>
<abstract id="abstract">
<p id="p-0001" num="0000">Complete data deletion from a storage device imposes high loads respectively on a host computer for transfer of insignificant data and on a storage device for execution of data transfer, a write operation, and a retry process. As such, a complete deletion command is provided to control deletion of a specified area of a storage space of the storage device without requiring data transfer from the host computer to the storage device. The complete deletion command on the storage device is executed in a simple manner that a write operation is performed to write &#x201c;arbitrary data&#x201d; over data of an area specified in, for example, a delete command, by a controller of the storage device, whereby the complete deletion of the specified data is executed. Consequently, a file system is enhanced to enable an application to execute the complete deletion command (&#x201c;complete file data detection function&#x201d;). </p>
</abstract>
<drawings id="DRAWINGS">
<figure id="figure-D00000" num="00000">
<img id="EMI-D00000" he="103.31mm" wi="66.67mm" file="US20070005659A1-20070104-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="figure-D00001" num="00001">
<img id="EMI-D00001" he="92.96mm" wi="117.09mm" file="US20070005659A1-20070104-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="figure-D00002" num="00002">
<img id="EMI-D00002" he="146.64mm" wi="104.22mm" file="US20070005659A1-20070104-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="figure-D00003" num="00003">
<img id="EMI-D00003" he="189.40mm" wi="103.55mm" file="US20070005659A1-20070104-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="figure-D00004" num="00004">
<img id="EMI-D00004" he="155.62mm" wi="93.73mm" file="US20070005659A1-20070104-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="figure-D00005" num="00005">
<img id="EMI-D00005" he="159.00mm" wi="161.80mm" file="US20070005659A1-20070104-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="figure-D00006" num="00006">
<img id="EMI-D00006" he="172.30mm" wi="97.28mm" file="US20070005659A1-20070104-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="figure-D00007" num="00007">
<img id="EMI-D00007" he="185.08mm" wi="157.14mm" file="US20070005659A1-20070104-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?summary-of-invention description="Summary of Invention" end="lead"?>
<heading level="2" id="h-0001">CLAIM OF PRIORITY </heading>
<p id="p-0002" num="0001"> The present application claims priority from Japanese application P2005-189158 filed on Jun. 29, 2005, the content of which is hereby incorporated by reference into this application. </p>
<heading level="2" id="h-0002">BACKGROUND OF THE INVENTION </heading>
<p id="p-0003" num="0002"> 1. Field of the Invention </p>
<p id="p-0004" num="0003"> The present invention relates to a technique of completely deleting data from a storage device without imposing high loads on either of a storage device and a host computer. More specifically, the invention relates to a deletion technique that serves while restraining performance degradation of the entirety of the storage device and host computer. </p>
<p id="p-0005" num="0004"> 2. Description of the Related Art </p>
<p id="p-0006" num="0005"> File systems are main element techniques that systematically controls data being stored in storage devices such as disk devices. </p>
<p id="p-0007" num="0006"> According to conventional methods, deletion of data contained in a file is, generally, performed by just deleting references to data of the file and to the file itself from control data of a file system. Real deletion of stored data is not involved, such that the file deletion is resultantly a very fast process. A conventional method, such as described above, thus delete just the references. As such, the method obviates a large number of commands, which are issued to the storage device for deletion of actual data, thereby reducing burdens on deletion, read, write, and other file operations. </p>
<p id="p-0008" num="0007"> However, such the conventional final deletion method is not yet sufficient in regard to application to security sensitive data or access-restricted data (i.e., data secured or protected by copyright laws and other control laws for the maximum number of accesses). Data of video contents of cable or radio broadcasts are often protected by control laws as mentioned above. </p>
<p id="p-0009" num="0008"> Considerations regarding security for handling copyright-protected contents or standards therefor in foreign countries are given to subject to conditions requiring that data deletion is to be complete, or in other words, data is not to be allowed to be reproduced from a deleted file even in the event of direct sequential access to the storage device. </p>
<p id="p-0010" num="0009"> An example satisfying such conditions is that data of a deletion objective file is overwritten with arbitrary, non-associated, insignificant data (&#x201c;0&#x201d;, for example) (as disclosed in Japanese Unexamined Patent Application Publication No. 1993-53891). The disclosed method is very simple, and can be enforced by an arbitrary application that processes security data of the above-described type. However, the method requires that time-consuming long, burdensome processing for transferring data intended to be written to the storage device from a host computer (or &#x201c;host,&#x201d; hereafter), in which an other process, if any, has to wait for completion of the write operation. The amount of data to be transferred and written is the same as the size of a deletion file. Loads occurring in this case are not tolerable in many events involving, particularly, a very large file, such as a video file containing a high resolution video. </p>
<p id="p-0011" num="0010"> Further, not a few cases can take place in which the designated storage device, such as the magnetic disk device, is prone to error, consequently causing intervention of a time consuming error recovery process (retry process) for a write operation until appropriate completion of an issued write command. According to the conventional technique, a difference does not exist at all between a real data write operation and a write operation for overwriting (deleting) security sensitive data, such that processing of the identical write operations are performed by the magnetic disk device. Consequently, cases involving retry processes can take place. </p>
<p id="p-0012" num="0011"> Such a retry process is likely to be a long-time consuming process, such that a state occurs in which the storage device cannot be used for a long time for an other process. This consequently introduces a delay in the execution of an other command, thereby reducing the data access rate of the storage device. </p>
<p id="p-0013" num="0012"> According to the technique disclosed in Japanese Unexamined Patent Application Publication No. 1993-5389, in the event of deletion of a file stored on the magnetic disk, it is determined whether the file is a security protection file. If the file is determined to be a security protection file, then a storage area storing the file is, detected, and information stored in that area is deleted. Subsequently, the information of the file is deleted in accordance with file control information, thereby to perform logical deletion of the file. On the other hand, if the file is determined to be not a security protection file, then only theoretical deletion is performed, and information deletion is not performed. There is not given a slight consideration regarding loads that occur due to the data transfer and increase of loads on a CPU (central processing unit) in the event of &#x201c;information deletion.&#x201d;</p>
<p id="p-0014" num="0013"> The complete data deletion from the storage device imposes such high loads respectively on the host computer for transfer of insignificant data (&#x201c;0&#x201d;, for example) and on the storage device for execution of data transfer and write operations, and finally, retry process. </p>
<p id="p-0015" num="0014"> Video data such as high resolution video contents are ordinary data that users operate. In view of salient trends toward increase of such video data, loads occurring with the data deletion of the above-described type cannot be solved by the conventional technique. In particular, in a data storage system, such as a video recorder device or set-top box including a magnetic disk device, the appropriate operation of the entire system is very sensitive to the performance of its incorporated storage device. In such a device, an excessively large amount of load occurs with the conventional data deletion method, so that the loads are not tolerable. </p>
<p id="p-0016" num="0015"> Nevertheless, however, storage systems of the type described above are used to handle video contents and other data protected by control laws (copyright laws), so that complete data deletion has to be implemented therewith </p>
<heading level="2" id="h-0003">SUMMARY OF THE INVENTION </heading>
<p id="p-0017" num="0016"> The present invention is made to provide a new or novel command (complete deletion command) for controlling a storage device in order to accomplish the complete deletion of a file. </p>
<p id="p-0018" num="0017"> The complete deletion command is capable of controlling deletion of a specified area of a storage space of a storage device without requiring data transfer from a host to the storage device. The complete deletion command on the storage device is executed in a simple manner that a write operation is performed to write &#x201c;arbitrary data&#x201d; over data of an area specified in, for example, a delete command, by a controller of the storage device. Thereby, the complete deletion of the specified data is executed. </p>
<p id="p-0019" num="0018"> In this case, even when an error of mismatched written data is found as a result of comparison with &#x201c;arbitrary data,&#x201d; since the original data is overwritten with the &#x201c;arbitrary data&#x201d; and is held an unreadable state, retry and other processes such as the error recovery process do not have to be performed. This often applies to disk storage devices of a type using rotary recording medium that involves irreversible shifting of a storage area on which a write operation is performed such that a magnetic field appropriately is applied or a laser beam is appropriately irradiated from an area (storage area or block) of the disk. </p>
<p id="p-0020" num="0019"> Consequently, the file system is enhanced to enable an application to execute the complete deletion command (&#x201c;complete file data detection function&#x201d;). </p>
<p id="p-0021" num="0020"> The complete deletion command has the following effects and advantages: </p>
<p id="p-0022" num="0021"> (a) Unlike the conventional overwrite operation, data transfer between the storage device and the host computer for the data deletion is not necessary, it is possible to reduce both the load on an I/O bus of a host computer and the load on a storage device controller to handle data. Thereby, as in the cases of memories of the host computer and the storage device controller, in the event of an overwrite operation, consumption of memory resources necessary to store data to be transferred between the host computer and the storage device is reduced as well. </p>
<p id="p-0023" num="0022"> (b) It is not difficult to install a &#x201c;complete file data deletion function&#x201d; (or, &#x201c;complete delete function&#x201d;) into an application, and it is sufficient for the application only to execute a single function provided by a file system. Execution of the complete delete function causes a single or a multiple delete commands to be issued to the storage device, whereby data is effectively completely deleted from the storage device. </p>
<p id="p-0024" num="0023"> In the event of deletion of data from the storage device, the present invention reduces the load on the controller of the device and the load on the host computer using the device, thereby to improve the access speed of the entirety of the device.</p>
<?summary-of-invention description="Summary of Invention" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<heading level="2" id="h-0004">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<p id="p-0025" num="0024"> <figref idref="DRAWINGS">FIG. 1</figref> is a view of a typical hardware configuration of a system including a magnetic disk device and allowing the adaptation of a security-data complete deletion technique or method according to the present invention; </p>
<p id="p-0026" num="0025"> <figref idref="DRAWINGS">FIG. 2</figref> is a conceptual view showing that a file system controls a file by segmenting the file into mutually adjacent logical blocks having fixed sizes; </p>
<p id="p-0027" num="0026"> <figref idref="DRAWINGS">FIG. 3</figref> is a view showing information of a file and the structure thereof that are handled by the file system; </p>
<p id="p-0028" num="0027"> <figref idref="DRAWINGS">FIG. 4</figref> is a view descriptive of the state of execution of a complete deletion command for file data; </p>
<p id="p-0029" num="0028"> <figref idref="DRAWINGS">FIG. 5</figref> is a diagram showing a detailed follow of processes that are executed by the file system to completely delete the file; </p>
<p id="p-0030" num="0029"> <figref idref="DRAWINGS">FIG. 6</figref> shows a diagram showing the structure of a complete deletion command to be issued to a magnetic disk device, and a diagram showing the flow of generation of the command; and </p>
<p id="p-0031" num="0030"> <figref idref="DRAWINGS">FIG. 7</figref> is a diagram showing a complete deletion command and diagram showing the flow of a process of an other command in the magnetic disk device.</p>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?detailed-description description="Detailed Description" end="lead"?>
<heading level="2" id="h-0005">DETAILED DESCRIPTION OF THE EMBODIMENTS </heading>
<p id="p-0032" num="0031"> An embodiment of the present invention will be described herebelow. </p>
<p id="p-0033" num="0032"> <figref idref="DRAWINGS">FIG. 1</figref> discloses a computer system including a magnetic disk device and allowing the adaptation of security-data complete deletion method according to the present invention. </p>
<p id="p-0034" num="0033"> In the computer system, under control of a central processing unit <b>100</b> (&#x201c;CPU,&#x201d; hereafter), an application <b>111</b> in a main memory <b>110</b> uses a file system <b>112</b> resident in the main memory <b>110</b> to thereby issue commands to a magnetic disk device <b>120</b>. The magnetic disk device <b>120</b> includes a local memory <b>121</b> and a controller <b>122</b> that controls access to data stored on a magnetic disk medium <b>123</b>. </p>
<p id="p-0035" num="0034"> The CPU <b>100</b> passes the respective commands to the magnetic disk device <b>120</b> through a system bus <b>140</b>. A display <b>131</b> is able to display data process results through a display adapter <b>130</b>. </p>
<p id="p-0036" num="0035"> <figref idref="DRAWINGS">FIG. 2</figref> is a conceptual view showing that the file system <b>112</b> performs control by segmenting a storage space <b>200</b> (file) into mutually adjacent logical blocks <b>201</b> to <b>204</b> having fixed sizes. </p>
<p id="p-0037" num="0036"> The respective blocks are identified using numbers <b>0</b>(<b>201</b>) to d(<b>204</b>) (logical block numbers). Thereby, direct mapping of the logical block numbers <b>0</b>(<b>201</b>) to d(<b>204</b>) and addresses of physical blocks on the medium magnetic disk can be instantiated in a simple manner. The file system <b>112</b> uses a logical block allocation table <b>210</b> provided for controlling an allocation state <b>212</b> of each respective logical block <b>211</b>, thereby to indicate whether, for example, a logical block <b>213</b> includes valid data. </p>
<p id="p-0038" num="0037"> In the present embodiment, logical blocks <b>0</b>(<b>213</b>), <b>1</b>(<b>214</b>), <b>2</b>(<b>215</b>), and <b>4</b>(<b>217</b>) are used. More specifically, the logical blocks <b>0</b>(<b>213</b>), <b>1</b>(<b>214</b>), <b>2</b>(<b>215</b>), and <b>4</b>(<b>217</b>) are in allocated states to store system data of the file system <b>112</b> or data. Logical blocks <b>3</b>(<b>216</b>) and d(<b>218</b>) are in unused states and are usable to store data. A table <b>200</b> (itself) is stored with a single or plurality of logical blocks on the medium magnetic disk, and correlations between logical blocks and physical blocks can be retained even after the system has been powered off. </p>
<p id="p-0039" num="0038"> <figref idref="DRAWINGS">FIG. 3</figref> is a view showing information of a file and the structure thereof that are handled by the file system <b>112</b>. </p>
<p id="p-0040" num="0039"> A file table <b>300</b> contains a file name <b>301</b> and control information <b>310</b> to <b>313</b> regarding each respective file. Logical blocks <b>302</b> are recorded with data corresponding to the respective control information. A file information table <b>320</b> and the file table <b>300</b> themselves are stored on the magnetic disk, and correlations between logical blocks and physical blocks can be retained. </p>
<p id="p-0041" num="0040"> The file information table <b>320</b> contains file descriptors, namely, a file name <b>321</b>, a file size <b>322</b>, a file type <b>323</b>, and file access rights <b>324</b>, and other information. The block of the file access rights <b>324</b> is used to store information regarding protection of data contained in the file, and information indicative of whether to require complete data deletion when the file is discarded. </p>
<p id="p-0042" num="0041"> The file information table <b>320</b> additionally stores a file map <b>325</b> indicative of the numbers of logical blocks used to stored data. The file map <b>325</b> is used to directly map a file offset (address of data in the file) to a physical block address of the magnetic disk medium. </p>
<p id="p-0043" num="0042"> For example, data of an offset <b>0</b> in a file is stored on a corresponding medium magnetic disk via a logical block <b>22</b>(<b>326</b>). Data of an offset identical to the size of the logical block is stored on the corresponding medium magnetic disk via a logical block <b>23</b>(<b>327</b>). The last data of the file is stored on the corresponding medium magnetic disk via a logical block <b>100</b>(<b>328</b>). </p>
<p id="p-0044" num="0043"> The data structure described above enables simple mapping between the logical block address of the file data (data offset in the file) and the physical block address. The mapping is used in a manner as shown in <figref idref="DRAWINGS">FIG. 4</figref>, particularly, upon request from an application. </p>
<p id="p-0045" num="0044"> <figref idref="DRAWINGS">FIG. 4</figref> is a view descriptive of the state of execution of a complete deletion command for file data. The case shown is assumed in which a request <b>402</b> for the complete deletion is issued to a file system <b>403</b> from an application <b>401</b> currently being executed in a host <b>400</b>. In this case, the file system <b>403</b> responsively-acquires logical block addresses, which constitute the file, by using a file descriptor, and then issues a complete deletion command <b>410</b> for respective logical blocks <b>423</b>. </p>
<p id="p-0046" num="0045"> A controller <b>421</b> of the magnetic disk device <b>420</b> processes the received delete command <b>410</b>. Then, in accordance with specifications of the received command <b>410</b>, the controller <b>421</b> deletes data of physical blocks that have the contents of all specified logical blocks <b>423</b> stored on a magnetic disk device <b>422</b>. </p>
<p id="p-0047" num="0046"> <figref idref="DRAWINGS">FIG. 5</figref> shows a detailed follow of processes that are executed by the file system to completely delete the file. The processes can be applied either a file for which the data complete deletion is not required or to a file for which security is not taken into account. </p>
<p id="p-0048" num="0047"> First, a file size <b>322</b> is checked, and it is determined whether the file is empty or has logical blocks (at step <b>500</b>). If the file is empty (&#x201c;No&#x201d;), then an entry of the file in a file table <b>200</b> is deleted (at step <b>560</b>). A logical block including a file descriptor (file name <b>321</b>, file size <b>322</b>, file type <b>323</b>, access rights <b>324</b>, and file map <b>325</b>) is set to a free state, and the file is freed (at step <b>570</b>). </p>
<p id="p-0049" num="0048"> Alternatively, if the file is not empty (&#x201c;Yes&#x201d; at step <b>500</b>), then steps described below are executed until logical blocks registered in a file map contained in the file are deleted. To begin with, a last logical block number in the file map is acquired from the map (at step <b>510</b>). In the event that the requested file deletion method is the complete deletion-(&#x201c;Yes&#x201d; at step <b>520</b>), a delete command <b>410</b> is issued to the magnetic disk device <b>420</b> from the controller <b>421</b> (shown in <figref idref="DRAWINGS">FIG. 4</figref>) to completely delete data stored in the logical block (at step <b>530</b>), whereby the data is deleted. Upon completion of the command execution, the processed logical block is set to a free state (at step <b>540</b>), the number of the block is removed from the file map (at step <b>550</b>). On the other hand, in the event that the file complete deletion is not requested (&#x201c;No&#x201d;) at step <b>520</b>), the same steps as above performed without issuance of the complete deletion command <b>410</b> to the magnetic disk device <b>420</b>. If the file map becomes empty (&#x201c;No&#x201d; at step <b>500</b>), then the entry of the file registered in the file table <b>200</b> is removed (at step <b>560</b>), and the logical block containing the file descriptor is freed (at step <b>570</b>). </p>
<p id="p-0050" num="0049"> <figref idref="DRAWINGS">FIG. 6</figref> shows a diagram showing the structure of a complete deletion command <b>600</b> to be issued to the magnetic disk device, and the flow of generating the command <b>600</b>. The complete deletion command <b>600</b> is identified with a command code <b>601</b>, and is configured of a field <b>602</b> that stores a physical block address, and a field <b>603</b> that specifies a deletion objective area that is started from a specified address. </p>
<p id="p-0051" num="0050"> The complete deletion command <b>600</b> is generated by the file system with respect to a respective logical block requiring the complete deletion. Using a logical block number (<b>602</b>) of the deletion objective file, the file system calculates a physical block address of the logical block (at step <b>610</b>). The size of the deletion area is the same as the size of the logical block. The file system generates a complete deletion command <b>600</b> for deleting the physical block (at step <b>620</b>) and issues the complete deletion command <b>600</b> to the magnetic disk device (at step <b>630</b>). The magnetic disk device waits for completion of the received command <b>600</b> (at step <b>640</b>), and upon completion, posts a notification of completion of the complete deletion command <b>600</b>. Then, the flow terminates. </p>
<p id="p-0052" num="0051"> The step of waiting (at step <b>640</b>) implies that a command other than the complete deletion command is executed with precedence in accordance with a so-called a command queuing technique. The waiting is, therefore, unnecessary in the event the command queuing technique is not used. The command priority can be determined by, for example, command code <b>601</b>. Suppose now that a command with a priority level higher than the complete deletion command during execution of the complete deletion command is issued in a step (not shown). In this case, the process may be performed in the manner that the execution of the complete deletion command is suspended, the other command is instead executed, and the complete deletion command is reexecuted upon completion of the execution of the other command. </p>
<p id="p-0053" num="0052"> <figref idref="DRAWINGS">FIG. 7</figref> shows the flow of a process of the complete deletion command and an other command in the magnetic disk device. </p>
<p id="p-0054" num="0053"> The controller <b>122</b> (shown in <figref idref="DRAWINGS">FIG. 1</figref>) of the magnetic disk device <b>120</b> waits for commands incoming from the host (at step <b>700</b>). Commands the controller <b>122</b> include conventional a readout or write command, present inventive command, and other necessary command for the magnetic disk device <b>120</b>. </p>
<p id="p-0055" num="0054"> If a received command is a complete deletion command (&#x201c;Yes&#x201d; at step), the controller <b>122</b> writes data specified in the command, specifically, a data amount of &#x201c;0&#x201d; or randomly selected data over a physical block of an address specified in the command (at step <b>720</b>). The result of a write operation need not be checked because accuracy of the write data (accurate identity between the written data and intended write data) cannot be required. </p>
<p id="p-0056" num="0055"> In this manner, original data present on the magnetic disk medium is replaced by &#x201c;0&#x201d; or randomly selected arbitrary data, such that complete deletion of the original data is resultantly implemented. Even if part of the deletion is incomplete, the probability of retrieving the original data is extremely low. </p>
<p id="p-0057" num="0056"> Upon completion of the operation of completion deletion, the execution completion of the complete deletion command is notified to the host (at step <b>770</b>). </p>
<p id="p-0058" num="0057"> In comparison with the above-described simple operation for the complete deletion command, the other command, particularly, the write command is processed by initially acquiring from the host all data necessary to write to the magnetic disk device (at step <b>730</b>). Subsequently, data is written onto the magnetic disk device, or alternatively, data is read out from the magnetic disk device in the event of the read command (at step <b>740</b>). Thereafter, the execution results of the commands are verified, and it is determined whether a process such as retry or error recovery process is necessary (at step <b>750</b>). The operation for the retry process is iterated several times, and then the flow terminates (at step <b>760</b>). </p>
<p id="p-0059" num="0058"> Upon completion of the command, the completion is notified to the host (at step <b>770</b>). </p>
<p id="p-0060" num="0059"> The process flow explicitly indicates advantages of the complete deletion command of the present invention that completely deletes data stored on the magnetic disk device. In the event of the complete deletion command, neither data transfer between the host and the controller nor an error recovery process is necessary. </p>
<p id="p-0061" num="0060"> The present invention thus described can be adapted to disk storage devices using a rotary recording medium, in which a magnetic field is appropriately applied to a predetermined area or a laser beam is appropriately irradiated thereon to irreversibly change the area, thereby to record information. </p>
<p id="p-0062" num="0061"> Having described a preferred embodiment of the invention with reference to the accompanying drawings, it is to be understood that the invention is not limited to the embodiment and that various changes and modifications could be effected therein by one skilled in the art without departing from the spirit or scope of the invention as defined in the appended claims. </p>
<?detailed-description description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is: </us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text><b>1</b>. A data deletion method for a computer system having a central processing unit (&#x201c;CPU&#x201d;, hereinafter), a memory connected to the CPU to be accessible, and a storage device using a rotary recording medium, wherein: 
<claim-text>the computer system includes a function of deleting data of a file which data is written by a file system on the rotary recording medium through the CPU, the file system being expanded on the memory; </claim-text>
<claim-text>the storage device includes a controller including a function of overwriting the data of the file, which is written on the rotary recording medium, with arbitrary data; and </claim-text>
<claim-text>the file system includes a function of sending a command to the storage device upon being accessed from an application expanded on the memory, the command overwriting data of a file with arbitrary data, </claim-text>
<claim-text>the data deletion method comprising: </claim-text>
<claim-text>a first step wherein the application issues to the file system a request for deleting the file; </claim-text>
<claim-text>a second step wherein the file system sends to the controller a command(s) for performing overwriting with one item of or a plurality of items of the arbitrary data for the file; and </claim-text>
<claim-text>a third step wherein, in response to the command from the file system, the controller performs overwriting of data of the file that is written on the rotary recording medium. </claim-text>
</claim-text>
 </claim>
<claim id="CLM-00002" num="00002">
<claim-text><b>2</b>. A data deletion method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the command for performing overwriting with one item of or the plurality of items of the arbitrary data for the file is issued with respect to each of logical blocks of the file segmented into a plurality of logical blocks. </claim-text>
 </claim>
<claim id="CLM-00003" num="00003">
<claim-text><b>3</b>. A data deletion method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the file system deletes a reference of a file requested by the application for deletion. </claim-text>
 </claim>
<claim id="CLM-00004" num="00004">
<claim-text><b>4</b>. A data deletion method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein an error recovery process is not performed on the data overwritten in the third step. </claim-text>
 </claim>
<claim id="CLM-00004-1" num="00004-1">
<claim-text><b>4</b>. A data deletion method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising: 
<claim-text>a fourth step wherein the file system issues an other command to the controller during the overwriting in the third step; and </claim-text>
<claim-text>a fifth step wherein the controller executes the other command with priority over the overwriting in the third step. </claim-text>
</claim-text>
 </claim>
<claim id="CLM-00006" num="00006">
<claim-text><b>6</b>. A storage device, comprising: 
<claim-text>a memory; </claim-text>
<claim-text>a rotary recording medium; and </claim-text>
<claim-text>a controller including a function of overwriting data of a file, which is stored on the rotary recording medium, with arbitrary data. </claim-text>
</claim-text>
 </claim>
<claim id="CLM-00007" num="00007">
<claim-text><b>7</b>. A computer system having a CPU (central processing unit), a memory connected to the CPU to be accessible, and a storage device using a rotary recording medium, wherein: 
<claim-text>the storage device includes a controller including a function of overwriting the data of the file, which is written on the rotary recording medium, with arbitrary data; and </claim-text>
<claim-text>the file system expanded on the memory includes a command that upon being accessed from an application expanded on the memory, instructs the storage device through the CPU to overwrite data of a file that is written on the rotary recording medium.</claim-text>
</claim-text>
 </claim>
</claims>
</us-patent-application>
