Base de données orientée composant

En informatique, une base de données orientée composant (component-oriented database ou CODB) est un ensemble d'informations stockées sous un modèle particulier de gestion de données et de programmation de systèmes de gestion de base de données. La particularité principale d'une CODB est l'usage du paradigme de la programmation orientée composant.

En programmation informatique et modélisation de données, l'approche orientée objet (OO) a conduit à une meilleure réutilisation des codes informatiques, ce qui a permis l'utilisation d'un nouveau modèle, appelé "orienté composant" (OC). 
Dans ce modèle, on peut regrouper les classes en cellules ("composants").

Les composants jouent un rôle similaire à celui de la fonction dans la programmation structurée, un style de code qui, bien que contemporain de la base de données relationnelle, a introduit la réutilisation en informatique.

Ainsi, quand on utilise le modèle de la BD orientée composant, on profite des particularités et des facilités de tous ses prédécesseurs. C'est plus simple de la comprendre avec l'idée du "composant visuel". Il s'agit d'une application qui peut être déployée sous une forme autre qu'un exécutable ou du bytecode ; elle se matérialise en une icône dans une autre application. Quand on clique sur l'icône, le composant visual accomplit ses tâches. Alors, ces concepts-ci peuvent être étendus aux "composants non visuels".

Dans des activités de bases de données, un composant, visuel ou non, est un ensemble de "classes". Un composant peut être lié à d'autres composants par des "adaptateurs".

Depuis l'orienté objet, les données et les méthodes sont liés au sein de classes. Donc, il est difficile de définir la limite entre programmation OC et CODB. Néanmoins, ça se situe dans un contexte purement théorique et n'a pas d'importance pratique, car l'ORDBMS et le "CRDB" ("component-relational database") sont utilisés à grande échelle. Ainsi, on peut programmer sous le nouveau paradigme tout en utilisant des logiciels traditionnels.

En programmation, l'OC est mise en œuvre au moyen de langages largement répandus comme le C++ ou le Java. On utilise aussi la technique de "projection" (""). L'UML, qui permet des modélisations sous forme de diagramme, facilite la conception de logiciel. La gestion de données et la gestion de base de données utilisent une "technique de projection" similaire au paradigme ORDBMS.

Le principal avantage des bases de données orientées composant est l'optimisation de la réutilisation du travail. Par rapport à l'orienté objet, l'OC permet de plus d'intégrer des applications « prêt-à-porter » comme modules dans de nouveaux projets.

Ces particularités spécifiques à l'orienté composant ne sont pas possibles avec l'orienté objet traditionnel, bien que l'idée du composant dérive "naturellement" du concept d'objet. Les notions d'encapsulation, d'héritage et de polymorphisme n'impliquent pas nécessairement l'idée de réutilisation d'applications sous forme de modules dans de nouveaux travaux. La "pensée OC" assure aussi que les composants soient testés au maximum. Donc, l’"orienté composant" permet une plus grande réutilisation. En outre, le modèle OC implique une meilleure intelligibilité pour les utilisateurs finaux.

Le paradigme OC utilise les mêmes logiciels utilisés dans le paradigme OO. Néanmoins, il s'agit de deux différents modèles. La programmation et la gestion d'une CODB permet plus la réutilisaton que ceux d'une OODB. Dans une CODB, un système peut être composé des ensembles de classes (composants), chacun réutilisé à partir d'un autre système .





