<s>
<NP>
Opérateur	NOM	opérateur
</NP>
<PP>
de	PRP	de
<NP>
déréférencement	NOM	<unknown>
</NP>
</PP>
<NP>
L'	DET:ART	le
opérateur	NOM	opérateur
</NP>
<PP>
de	PRP	de
<NP>
déréférencement	NOM	<unknown>
,	PUN	,
</NP>
</PP>
<VPpart>
désigné	VER:pper	désigner
</VPpart>
<PP>
par	PRP	par
<PP>
"	PUN:cit	"
<NP>
codice_1	NOM	<unknown>
"	PUN:cit	"
(	PUN	(
c'est-à-dire	ADV	c'est-à-dire
</NP>
</PP>
</PP>
<NP>
un	DET:ART	un
astérisque	NOM	astérisque
)	PUN	)
,	PUN	,
</NP>
<VN>
est	VER:pres	être
</VN>
<NP>
un	DET:ART	un
opérateur	NOM	opérateur
</NP>
<AP>
unaire	ADJ	unaire
(	PUN	(
c'est-à-dire	ADV	c'est-à-dire
</AP>
<PP>
avec	PRP	avec
<NP>
un	DET:ART	un
seul	ADJ	seul
opérande	NOM	opérande
)	PUN	)
</NP>
</PP>
<Ssub>
que	KON	que
</Ssub>
<VN>
l'	PRO:PER	la|le
on	PRO:PER	on
trouve	VER:pres	trouver
</VN>
<PP>
dans	PRP	dans
<NP>
<NP>
les	DET:ART	le
langages	NOM	langage
C	NUM	C
</NP>
<COORD>
et	KON	et
</COORD>
<NP>
C++	NAM	<unknown>
(	PUN	(
</NP>
</NP>
</PP>
<NP>
qui	PRO:REL	qui
</NP>
<VN>
incluent	VER:pres	inclure
</VN>
<NP>
des	PRP:det	du
pointeurs	NOM	pointeur
)	PUN	)
</NP>
.	SENT	.
</s>
<s>
<VN>
Il	PRO:PER	il
fonctionne	VER:pres	fonctionner
</VN>
<PP>
sur	PRP	sur
<NP>
un	DET:ART	un
pointeur	NOM	pointeur
</NP>
</PP>
<COORD>
et	KON	et
</COORD>
<VN>
renvoie	VER:pres	renvoyer
</VN>
<NP>
la	DET:ART	le
valeur	NOM	valeur
</NP>
<VPpart>
stockée	VER:pper	stocker
</VPpart>
<PP>
à	PRP	à
<NP>
l'	DET:ART	le
adresse	NOM	adresse
</NP>
</PP>
<VPpart>
contenue	VER:pper	contenir
</VPpart>
<PP>
dans	PRP	dans
<NP>
le	DET:ART	le
pointeur	NOM	pointeur
</NP>
</PP>
.	SENT	.
</s>
<s>
<VN>
On	PRO:PER	on
dit	VER:pres	dire
</VN>
<PP>
pour	PRP	pour
<NP>
cela	PRO:DEM	cela
</NP>
</PP>
<Ssub>
que	PRO:REL	que
</Ssub>
<VN>
l'	PRO:PER	la|le
on	PRO:PER	on
"	PUN:cit	"
déréférence	NOM	<unknown>
"	PUN:cit	"
</VN>
<NP>
le	DET:ART	le
pointeur	NOM	pointeur
</NP>
.	SENT	.
</s>
<s>
<PONCT:S>
Par	PRP	par
exemple	NOM	exemple
,	PUN	,
</PONCT:S>
<NP>
le	DET:ART	le
code	NOM	code
C	NUM	C
suivant	NOM	suivant
:	PUN	:
</NP>
<VN>
affecte	VER:pres	affecter
</VN>
<NP>
42	NUM	@card@
</NP>
<PP>
à	PRP	à
<NP>
la	DET:ART	le
variable	ADJ	variable
codice_2	NOM	<unknown>
</NP>
</PP>
<PP>
à	PRP	à
<NP>
l'	DET:ART	le
aide	NOM	aide
</NP>
</PP>
<PP>
de	PRP	de
<NP>
l'	DET:ART	le
opérateur	NOM	opérateur
</NP>
</PP>
<PP>
de	PRP	de
<NP>
déréférencement	NOM	<unknown>
</NP>
</PP>
<COORD>
et	KON	et
</COORD>
<PP>
d'	PRP	de
<NP>
un	DET:ART	un
pointeur	NOM	pointeur
</NP>
</PP>
<PP>
sur	PRP	sur
<NP>
la	DET:ART	le
variable	ADJ	variable
codice_2	NOM	<unknown>
</NP>
</PP>
.	SENT	.
</s>
<s>
<NP>
L'	DET:ART	le
opérateur	NOM	opérateur
</NP>
<AP>
unaire	ADJ	unaire
</AP>
<AP>
*	ADJ	<unknown>
,	PUN	,
</AP>
<AP>
tel	PRO:DEM	tel
</AP>
<Ssub>
que	PRO:REL	que
</Ssub>
<VN>
défini	VER:pper	définir
</VN>
<PP>
en	PRP	en
<NP>
<NP>
C	NUM	C
</NP>
<COORD>
et	KON	et
</COORD>
<NP>
C	NUM	C
++	NOM	<unknown>
,	PUN	,
</NP>
</NP>
</PP>
<VN>
peut	VER:pres	pouvoir
</VN>
<VN>
être	VER:infi	être
utilisé	VER:pper	utiliser
</VN>
<PP>
dans	PRP	dans
<PP>
le	DET:ART	le
<PP>
cas	NOM	cas
<PP>
de	PRP	de
<NP>
pointeur	NOM	pointeur
</NP>
</PP>
</PP>
</PP>
</PP>
<AP>
multiple	ADJ	multiple
,	PUN	,
</AP>
<NP>
où	PRO:REL	où
</NP>
<NP>
plusieurs	PRO:IND	plusieurs
déréférencements	NOM	<unknown>
</NP>
<VN>
sont	VER:pres	être
</VN>
<VPpart>
requis	VER:pper	requérir
</VPpart>
.	SENT	.
</s>
<s>
<NP>
Les	DET:ART	le
pointeurs	NOM	pointeur
</NP>
<VN>
peuvent	VER:pres	pouvoir
bien	ADV	bien
sûr	ADJ	sûr
</VN>
<VN>
référencer	VER:infi	référencer
</VN>
<NP>
<NP>
d'	PRP	de
autres	ADJ	autre
pointeurs	NOM	pointeur
</NP>
<COORD>
et	KON	et
,	PUN	,
dans	PRP	dans
de	PRP	de
tels	PRO:DEM	tel
cas	NOM	cas
,	PUN	,
</COORD>
<NP>
plusieurs	PRO:IND	plusieurs
utilisations	NOM	utilisation
</NP>
</NP>
<PP>
de	PRP	de
<NP>
l'	DET:ART	le
opérateur	NOM	opérateur
de	PRP	de
déréférencement	NOM	<unknown>
</NP>
</PP>
<VN>
sont	VER:pres	être
</VN>
<AP>
nécessaires	ADJ	nécessaire
</AP>
.	SENT	.
</s>
<s>
<NP>
L'	DET:ART	le
argument	NOM	argument
</NP>
<AP>
argv	NOM	<unknown>
</AP>
<PP>
de	PRP	de
<NP>
la	DET:ART	le
fonction	NOM	fonction
"	PUN:cit	"
main	NOM	main
"	PUN:cit	"
</NP>
</PP>
<PP>
en	PRP	en
<NP>
<NP>
C	NUM	C
(	PUN	(
</NP>
<COORD>
et	KON	et
</COORD>
<NP>
C	NUM	C
++	NOM	<unknown>
)	PUN	)
,	PUN	,
</NP>
</NP>
</PP>
<NP>
qui	PRO:REL	qui
</NP>
<VN>
est	VER:pres	être
</VN>
<VPpart>
donné	VER:pper	donner
</VPpart>
<PP>
dans	PRP	dans
<NP>
le	DET:ART	le
prototype	NOM	prototype
</NP>
</PP>
<PP>
sous	PRP	sous
<NP>
la	DET:ART	le
forme	NOM	forme
</NP>
</PP>
<AP>
codice_4	ADJ	<unknown>
,	PUN	,
</AP>
<VN>
est	VER:pres	être
</VN>
<NP>
un	DET:ART	un
exemple	NOM	exemple
</NP>
<AP>
simple	ADJ	simple
</AP>
<PP>
de	PRP	de
<NP>
pointeur	NOM	pointeur
</NP>
</PP>
<AP>
multiple	ADJ	multiple
</AP>
.	SENT	.
</s>
<s>
<NP>
Le	DET:ART	le
nom	NOM	nom
</NP>
<PP>
de	PRP	de
<NP>
l'	DET:ART	le
exécutable	ADJ	exécutable
</NP>
</PP>
<PP>
du	PRP:det	du
<NP>
programme	NOM	programme
</NP>
</PP>
<VPpart>
appelé	VER:pper	appeler
,	PUN	,
</VPpart>
<COORD>
ainsi	KON	ainsi
</COORD>
<Ssub>
que	KON	que
</Ssub>
<NP>
tous	PRO:IND	tout
les	DET:ART	le
arguments	NOM	argument
de	PRP	de
ligne	NOM	ligne
</NP>
<PP>
de	PRP	de
<NP>
commande	NOM	commande
</NP>
</PP>
<AP>
suivants	ADJ	suivant
,	PUN	,
</AP>
<VN>
sont	VER:pres	être
</VN>
<VPpart>
stockés	VER:pper	stocker
</VPpart>
<PP>
sous	PRP	sous
<PP>
forme	NOM	forme
<PP>
de	PRP	de
<NP>
chaînes	NOM	chaîne
</NP>
</PP>
</PP>
</PP>
<PP>
de	PRP	de
<NP>
caractères	NOM	caractère
</NP>
</PP>
<AP>
indépendantes	ADJ	indépendant
</AP>
.	SENT	.
</s>
<s>
<NP>
Un	DET:ART	un
tableau	NOM	tableau
</NP>
<PP>
de	PRP	de
<NP>
pointeurs	NOM	pointeur
</NP>
</PP>
<PP>
sur	PRP	sur
<NP>
codice_5	NOM	<unknown>
</NP>
</PP>
<VN>
contient	VER:pres	contenir
</VN>
<NP>
des	PRP:det	du
pointeurs	NOM	pointeur
</NP>
<PP>
sur	PRP	sur
<NP>
le	DET:ART	le
premier	NUM	premier
caractère	NOM	caractère
</NP>
</PP>
<PP>
de	PRP	de
<NP>
chacune	PRO:IND	chacun
</NP>
</PP>
<PP>
de	PRP	de
<NP>
<NP>
ces	PRO:DEM	ce
chaînes	NOM	chaîne
</NP>
<COORD>
et	KON	et
</COORD>
<NP>
ce	PRO:DEM	ce
tableau	NOM	tableau
de	PRP	de
pointeurs	NOM	pointeur
</NP>
</NP>
</PP>
<VN>
est	VER:pres	être
</VN>
<VPpart>
transmis	VER:pper	transmettre
</VPpart>
<PP>
à	PRP	à
<NP>
la	DET:ART	le
fonction	NOM	fonction
</NP>
</PP>
<AP>
codice_6	ADJ	<unknown>
</AP>
<Ssub>
tant	ADV	tant
qu'	KON	que
</Ssub>
<NP>
argument	NOM	argument
codice_7	ADJ	<unknown>
</NP>
.	SENT	.
</s>
<s>
<NP>
La	DET:ART	le
variable	ADJ	variable
codice_7	NOM	<unknown>
</NP>
<VN>
est	VER:pres	être
en	PRP	en
fait	NOM	fait
</VN>
<NP>
un	DET:ART	un
pointeur	NOM	pointeur
</NP>
<PP>
sur	PRP	sur
<NP>
un	DET:ART	un
pointeur	NOM	pointeur
</NP>
</PP>
<PP>
sur	PRP	sur
<NP>
codice_5	NOM	<unknown>
,	PUN	,
</NP>
</PP>
<COORD>
et	KON	et
</COORD>
<VN>
représente	VER:pres	représenter
</VN>
<NP>
un	DET:ART	un
tableau	NOM	tableau
</NP>
<PP>
de	PRP	de
<NP>
pointeurs	NOM	pointeur
</NP>
</PP>
<PP>
sur	PRP	sur
<NP>
codice_5	NOM	<unknown>
</NP>
</PP>
.	SENT	.
</s>
<s>
<NP>
L'	DET:ART	le
autre	ADJ	autre
paramètre	NOM	paramètre
</NP>
<PP>
de	PRP	de
<NP>
la	DET:ART	le
fonction	NOM	fonction
</NP>
</PP>
<AP>
codice_6	ADJ	<unknown>
,	PUN	,
</AP>
<NP>
codice_12	NOM	<unknown>
,	PUN	,
</NP>
<VN>
est	VER:pres	être
</VN>
<NP>
un	DET:ART	un
codice_13	NOM	<unknown>
</NP>
<VN>
représentant	VER:ppre	représenter
</VN>
<NP>
la	DET:ART	le
taille	NOM	taille
</NP>
<PP>
du	PRP:det	du
<NP>
tableau	NOM	tableau
(	PUN	(
</NP>
</PP>
<VN>
c’	NOM	<unknown>
est-à-dire	ADV	est-à-dire
</VN>
<NP>
le	DET:ART	le
nombre	NOM	nombre
</NP>
<PP>
de	PRP	de
<NP>
pointeurs	NOM	pointeur
</NP>
</PP>
<PP>
sur	PRP	sur
<NP>
codice_5	ADJ	<unknown>
jusqu’	NOM	<unknown>
</NP>
</PP>
<PP>
au	PRP:det	au
<NP>
pointeur	NOM	pointeur
NULL	NAM	<unknown>
,	PUN	,
</NP>
</PP>
<NP>
qui	PRO:REL	qui
</NP>
<VN>
délimite	VER:pres	délimiter
</VN>
<NP>
le	DET:ART	le
tableau	NOM	tableau
</NP>
<PP>
de	PRP	de
<NP>
pointeurs	NOM	pointeur
)	PUN	)
</NP>
</PP>
.	SENT	.
</s>
<s>
<PONCT:S>
En	PRP	en
C	NUM	C
,	PUN	,
</PONCT:S>
<NP>
l'	DET:ART	le
adresse	NOM	adresse
</NP>
<PP>
d'	PRP	de
<NP>
une	DET:ART	un
structure	NOM	structure
(	PUN	(
</NP>
</PP>
<COORD>
ou	KON	ou
</COORD>
<PP>
d'	PRP	de
<NP>
une	DET:ART	un
union	NOM	union
)	PUN	)
</NP>
</PP>
<NP>
codice_15	ADJ	<unknown>
est	VER:pres	être
</NP>
<VPpart>
désignée	VER:pper	désigner
</VPpart>
<PP>
par	PRP	par
<NP>
codice_16	NOM	<unknown>
</NP>
</PP>
.	SENT	.
</s>
<s>
<NP>
L'	DET:ART	le
adresse	NOM	adresse
</NP>
<PP>
de	PRP	de
<NP>
l'	DET:ART	le
opérateur	NOM	opérateur
</NP>
</PP>
<AP>
codice_17	ADJ	<unknown>
</AP>
<VN>
est	VER:pres	être
</VN>
<NP>
l'	DET:ART	le
inverse	NOM	inverse
</NP>
<PP>
de	PRP	de
<NP>
l'	DET:ART	le
opérateur	NOM	opérateur
</NP>
</PP>
<PP>
de	PRP	de
<NP>
déréférencement	NOM	<unknown>
</NP>
</PP>
<AP>
codice_1	ADJ	<unknown>
,	PUN	,
donc	ADV	donc
codice_19	ADJ	<unknown>
</AP>
<VN>
est	VER:pres	être
</VN>
<AP>
équivalent	ADJ	équivalent
</AP>
<PP>
à	PRP	à
<NP>
codice_15	NOM	<unknown>
</NP>
</PP>
.	SENT	.
</s>
<s>
<NP>
L'	DET:ART	le
adresse	NOM	adresse
</NP>
<PP>
d'	PRP	de
<NP>
une	DET:ART	un
structure	NOM	structure
(	PUN	(
</NP>
</PP>
<COORD>
ou	KON	ou
</COORD>
<PP>
de	PRP	de
<NP>
l	NOM	<unknown>
'	PUN	'
union	NOM	union
)	PUN	)
</NP>
</PP>
<AP>
codice_15	ADJ	<unknown>
peut	VER:pres	pouvoir
</AP>
<COORD>
être	VER:infi	être
</COORD>
<VN>
attribué	VER:pper	attribuer
</VN>
<PP>
à	PRP	à
<NP>
un	DET:ART	un
pointeur	NOM	pointeur
</NP>
</PP>
<AP>
codice_22	ADJ	<unknown>
:	PUN	:
</AP>
<NP>
La	DET:ART	le
valeur	NOM	valeur
</NP>
<PP>
d'	PRP	de
<NP>
un	DET:ART	un
membre	NOM	membre
</NP>
</PP>
<AP>
codice_23	ADJ	<unknown>
</AP>
<PP>
d'	PRP	de
<NP>
une	DET:ART	un
structure	NOM	structure
</NP>
</PP>
<AP>
codice_15	ADJ	<unknown>
</AP>
<VN>
est	VER:pres	être
</VN>
<AP>
notée	VER:pper	noter
codice_25	NOM	<unknown>
</AP>
.	SENT	.
</s>
<s>
<VN>
Considérons	VER:pres	considérer
</VN>
<NP>
le	DET:ART	le
pointeur	NOM	pointeur
</NP>
<AP>
codice_22	ADJ	<unknown>
</AP>
<PP>
sur	PRP	sur
<NP>
codice_15	NOM	<unknown>
(	PUN	(
</NP>
</PP>
<AP>
c'est-à-dire	ADV	c'est-à-dire
codice_28	ADJ	<unknown>
)	PUN	)
,	PUN	,
codice_25	ADJ	<unknown>
</AP>
<VN>
est	VER:pres	être
</VN>
<AP>
équivalent	ADJ	équivalent
</AP>
<PP>
à	PRP	à
<NP>
codice_30	NOM	<unknown>
,	PUN	,
</NP>
</PP>
<COORD>
ainsi	KON	ainsi
qu'	KON	que
</COORD>
<PP>
à	PRP	à
<NP>
la	DET:ART	le
syntaxe	NOM	syntaxe
</NP>
</PP>
<AP>
codice_31	ADJ	<unknown>
</AP>
<NP>
qui	PRO:REL	qui
</NP>
<VN>
est	VER:pres	être
</VN>
<NP>
un	DET:ART	un
sucre	NOM	sucre
</NP>
<AP>
syntaxique	ADJ	syntaxique
</AP>
<VPinf>
pour	PRP	pour
</VPinf>
<VN>
accéder	VER:infi	accéder
</VN>
<PP>
aux	PRP:det	au
<NP>
membres	NOM	membre
</NP>
</PP>
<PP>
d'	PRP	de
<NP>
une	DET:ART	un
structure	NOM	structure
(	PUN	(
</NP>
</PP>
<COORD>
ou	KON	ou
</COORD>
<PP>
d'	PRP	de
<NP>
une	DET:ART	un
union	NOM	union
)	PUN	)
</NP>
</PP>
<PP>
via	PRP	via
<NP>
un	DET:ART	un
pointeur	NOM	pointeur
:	PUN	:
</NP>
</PP>
<NP>
L'	DET:ART	le
opérateur	NOM	opérateur
</NP>
<AP>
codice_32	ADJ	<unknown>
</AP>
<VN>
peut	VER:pres	pouvoir
</VN>
<VN>
être	VER:infi	être
</VN>
<AP>
chaîné	VER:pper	chaîner
</AP>
.	SENT	.
</s>
<s>
<PONCT:S>
Par	PRP	par
exemple	NOM	exemple
,	PUN	,
</PONCT:S>
<PP>
dans	PRP	dans
<NP>
une	DET:ART	un
liste	NOM	liste
</NP>
</PP>
<AP>
chaînée	ADJ	chaîné
,	PUN	,
</AP>
<VN>
on	PRO:PER	on
peut	VER:pres	pouvoir
</VN>
<VN>
se	PRO:PER	se
référer	VER:infi	référer
</VN>
<PP>
à	PRP	à
<NP>
codice_33	NOM	<unknown>
</NP>
</PP>
<PP>
pour	PRP	pour
<NP>
le	DET:ART	le
deuxième	NUM	deuxième
nœud	NOM	<unknown>
</NP>
</PP>
<PP>
suivant	VER:ppre	suivre
<AP>
(	PUN	(
</AP>
<VPpart>
en	PRO:PER	en
</VPpart>
</PP>
<VN>
supposant	VER:ppre	supposer
</VN>
<Ssub>
que	KON	que
</Ssub>
<NP>
codice_34	NOM	<unknown>
</NP>
<VN>
n'	ADV	ne
est	VER:pres	être
pas	ADV	pas
</VN>
<NP>
NULL	NAM	<unknown>
)	PUN	)
</NP>
.	SENT	.
</s>
