<s>
<NP>
Architecture	NOM	architecture
Dataflow	NAM	<unknown>
</NP>
<NP>
Un	DET:ART	un
ordinateur	ADJ	ordinateur
dataflow	NOM	<unknown>
(	PUN	(
"	PUN:cit	"
</NP>
<NP>
flux	NOM	flux
</NP>
<PP>
de	PRP	de
<NP>
données	NOM	donnée
"	PUN:cit	"
)	PUN	)
</NP>
</PP>
<VN>
décrit	VER:pres	décrire
</VN>
<NP>
une	DET:ART	un
architecture	NOM	architecture
</NP>
<NP>
où	PRO:REL	où
</NP>
<NP>
les	DET:ART	le
données	NOM	donnée
</NP>
<VN>
sont	VER:pres	être
</VN>
<NP>
des	PRP:det	du
entités	NOM	entité
</NP>
<AP>
actives	ADJ	actif
</AP>
<NP>
qui	PRO:REL	qui
</NP>
<VN>
traversent	VER:pres	traverser
</VN>
<NP>
le	DET:ART	le
programme	NOM	programme
</NP>
<PP>
de	PRP	de
<NP>
manière	NOM	manière
</NP>
</PP>
<AP>
asynchrone	ADJ	asynchrone
,	PUN	,
</AP>
<PP>
contrairement	ADV	contrairement
<PP>
à	PRP	à
<NP>
l'	DET:ART	le
architecture	NOM	architecture
</NP>
</PP>
</PP>
<AP>
classique	ADJ	classique
</AP>
<NP>
von	NAM	von
Neumann	NAM	Neumann
</NP>
<NP>
où	PRO:REL	où
</NP>
<VN>
elles	PRO:PER	elle
attendent	VER:pres	attendre
passivement	ADV	passivement
</VN>
<NP>
en	PRP	en
mémoire	NOM	mémoire
</NP>
<Ssub>
pendant	PRP	pendant
que	PRO:REL	que
</Ssub>
<NP>
le	DET:ART	le
programme	NOM	programme
</NP>
<VN>
est	VER:pres	être
</VN>
<VPpart>
exécuté	VER:pper	exécuter
séquentiellement	ADV	séquentiellement
</VPpart>
<PP>
suivant	PRP	suivant
<NP>
le	DET:ART	le
contenu	NOM	contenu
</NP>
</PP>
<PP>
du	PRP:det	du
<NP>
pointeur	NOM	pointeur
</NP>
</PP>
<PP>
de	PRP	de
<NP>
programme	NOM	programme
(	PUN	(
</NP>
</PP>
<NP>
PC	ABR	PC
)	PUN	)
</NP>
.	SENT	.
</s>
<s>
<VN>
On	PRO:PER	on
parle	VER:pres	parler
aussi	ADV	aussi
</VN>
<PP>
d'	PRP	de
<NP>
ordinateur	NOM	ordinateur
</NP>
</PP>
<VPpart>
cadencé	VER:pper	cadencer
</VPpart>
<PP>
par	PRP	par
<NP>
les	DET:ART	le
données	NOM	donnée
</NP>
</PP>
.	SENT	.
</s>
<s>
<PP>
Dans	PRP	dans
<NP>
une	DET:ART	un
architecture	NOM	architecture
flot	NOM	flot
</NP>
</PP>
<PP>
de	PRP	de
<NP>
données	NOM	donnée
,	PUN	,
</NP>
</PP>
<NP>
les	DET:ART	le
programmes	NOM	programme
</NP>
<VN>
sont	VER:pres	être
</VN>
<VPpart>
représentés	VER:pper	représenter
</VPpart>
<PP>
sous	PRP	sous
<PP>
forme	NOM	forme
<PP>
de	PRP	de
<NP>
graphes	NOM	graphe
:	PUN	:
</NP>
</PP>
</PP>
</PP>
<NP>
un	DET:ART	un
nœud	NOM	<unknown>
</NP>
<VN>
représente	VER:pres	représenter
</VN>
<NP>
une	DET:ART	un
opération	NOM	opération
</NP>
<VPinf>
à	PRP	à
</VPinf>
<VN>
effectuer	VER:infi	effectuer
,	PUN	,
</VN>
<Ssub>
tandis	KON	tandis
que	KON	que
</Ssub>
<NP>
les	DET:ART	le
données	NOM	donnée
</NP>
<VN>
circulent	VER:pres	circuler
</VN>
<PP>
sur	PRP	sur
<NP>
les	DET:ART	le
arcs	NOM	arc
</NP>
</PP>
<COORD>
et	KON	et
</COORD>
<VN>
forment	VER:pres	former
</VN>
<NP>
les	DET:ART	le
entrées	NOM	entrée
</NP>
<PP>
aux	PRP:det	au
<NP>
nœuds	NOM	<unknown>
</NP>
</PP>
.	SENT	.
</s>
<s>
<NP>
Les	DET:ART	le
données	NOM	donnée
</NP>
<VN>
sont	VER:pres	être
</VN>
<VPpart>
transportées	VER:pper	transporter
</VPpart>
<PP>
par	PRP	par
<NP>
des	PRP:det	du
jetons	NOM	jeton
(	PUN	(
"	PUN:cit	"
</NP>
</PP>
<NP>
token	NOM	<unknown>
"	PUN:cit	"
)	PUN	)
</NP>
.	SENT	.
</s>
<s>
<NP>
La	DET:ART	le
règle	NOM	règle
</NP>
<PP>
de	PRP	de
<NP>
base	NOM	base
,	PUN	,
</NP>
</PP>
<VPpart>
dite	VER:pper	dire
</VPpart>
<PP>
de	PRP	de
<NP>
déclenchement	NOM	déclenchement
,	PUN	,
</NP>
</PP>
<VN>
instaure	VER:pres	instaurer
</VN>
<Ssub>
que	KON	que
</Ssub>
<Ssub>
lorsqu'	KON	lorsque
</Ssub>
<NP>
un	DET:ART	un
nœud	NOM	<unknown>
</NP>
<VN>
voit	VER:pres	voir
</VN>
<NP>
toutes	PRO:IND	tout
ses	DET:POS	son
entrées	NOM	entrée
</NP>
<AP>
satisfaites	ADJ	satisfait
,	PUN	,
</AP>
<VN>
il	PRO:PER	il
est	VER:pres	être
</VN>
<VPpart>
activé	VER:pper	activer
</VPpart>
<COORD>
et	KON	et
</COORD>
<VN>
produit	VER:pres	produire
</VN>
<NP>
une	DET:ART	un
valeur	NOM	valeur
</NP>
<PP>
en	PRP	en
<NP>
<NP>
sortie	NOM	sortie
,	PUN	,
</NP>
<COORD>
et	KON	et
</COORD>
<NP>
les	DET:ART	le
jetons	NOM	jeton
</NP>
</NP>
</PP>
<AP>
présents	ADJ	présent
</AP>
<PP>
en	PRP	en
<NP>
entrées	NOM	entrée
</NP>
</PP>
<VN>
sont	VER:pres	être
</VN>
<AP>
supprimés	VER:pper	supprimer
</AP>
.	SENT	.
</s>
<s>
<NP>
Ces	PRO:DEM	ce
architectures	NOM	architecture
</NP>
<VN>
sont	VER:pres	être
</VN>
<VPpart>
étroitement	ADV	étroitement
couplées	VER:pper	coupler
</VPpart>
<PP>
aux	PRP:det	au
<NP>
langages	NOM	langage
</NP>
</PP>
<PP>
de	PRP	de
<NP>
programmation	NOM	programmation
</NP>
</PP>
<AP>
fonctionnelle	ADJ	fonctionnel
</AP>
.	SENT	.
</s>
<s>
<VN>
Elles	PRO:PER	elle
ne	ADV	ne
génèrent	VER:pres	générer
pas	ADV	pas
d'	PRP	de
effet	NOM	effet
</VN>
<PP>
de	PRP	de
<NP>
bord	NOM	bord
,	PUN	,
donc	ADV	donc
</NP>
</PP>
<VN>
ne	ADV	ne
nécessite	VER:pres	nécessiter
pas	ADV	pas
</VN>
<NP>
de	PRP	de
mémoire	NOM	mémoire
</NP>
<AP>
partagée	VER:pper	partager
,	PUN	,
</AP>
<COORD>
ni	KON	ni
</COORD>
<PP>
de	PRP	de
<NP>
<NP>
séquenceur	NOM	séquenceur
</NP>
<COORD>
ou	KON	ou
</COORD>
<NP>
pointeur	NOM	pointeur
de	PRP	de
programme	NOM	programme
</NP>
</NP>
</PP>
.	SENT	.
</s>
<s>
<VN>
Elles	PRO:PER	elle
sont	VER:pres	être
aussi	ADV	aussi
</VN>
<AP>
éminemment	ADV	éminemment
parallèles	ADJ	parallèle
:	PUN	:
</AP>
<NP>
l'	DET:ART	le
unité	NOM	unité
</NP>
<AP>
responsable	ADJ	responsable
</AP>
<PP>
de	PRP	de
<NP>
l'	DET:ART	le
exécution	NOM	exécution
</NP>
</PP>
<PP>
des	PRP:det	du
<NP>
instructions	NOM	instruction
</NP>
</PP>
<AP>
issue	ADJ	issu
</AP>
<PP>
de	PRP	de
<NP>
la	DET:ART	le
mémoire	NOM	mémoire
</NP>
</PP>
<VN>
contenant	VER:ppre	contenir
</VN>
<NP>
le	DET:ART	le
programme	NOM	programme
</NP>
<VN>
doit	VER:pres	devoir
</VN>
<VN>
posséder	VER:infi	posséder
</VN>
<NP>
un	DET:ART	un
nombre	NOM	nombre
</NP>
<AP>
relativement	ADV	relativement
élevé	VER:pper	élever
</AP>
<PP>
de	PRP	de
<NP>
processeurs	NOM	processeur
(	PUN	(
</NP>
</PP>
<NP>
16	NUM	@card@
et	KON	et
au-dessus	ADV	au-dessus
)	PUN	)
</NP>
<VPinf>
afin	KON	afin
de	PRP	de
</VPinf>
<VN>
maximiser	VER:infi	maximiser
</VN>
<NP>
la	DET:ART	le
puissance	NOM	puissance
</NP>
<AP>
totale	ADJ	total
</AP>
<PP>
de	PRP	de
<NP>
l'	DET:ART	le
ordinateur	NOM	ordinateur
</NP>
</PP>
.	SENT	.
</s>
<s>
<NP>
Plusieurs	PRO:IND	plusieurs
unités	NOM	unité
</NP>
<PP>
de	PRP	de
<NP>
calcul	NOM	calcul
</NP>
</PP>
<VN>
traitant	VER:ppre	traiter
</VN>
<NP>
des	PRP:det	du
données	NOM	donnée
</NP>
<AP>
différentes	ADJ	différent
</AP>
<VN>
les	PRO:PER	la|le
classent	VER:pres	classer
</VN>
<PP>
dans	PRP	dans
<NP>
la	DET:ART	le
famille	NOM	famille
</NP>
</PP>
<PP>
des	PRP:det	du
<NP>
ordinateurs	ADJ	ordinateur
MIMD	NAM	<unknown>
(	PUN	(
</NP>
</PP>
<NP>
Multiple	ADJ	multiple
Instructions	NOM	instruction
,	PUN	,
</NP>
<NP>
Multiple	ADJ	multiple
Data	VER:simp	dater
)	PUN	)
</NP>
.	SENT	.
</s>
<s>
<NP>
Un	DET:ART	un
nœud	NOM	<unknown>
</NP>
<AP>
computationnel	ADJ	<unknown>
</AP>
<VN>
peut	VER:pres	pouvoir
</VN>
<VN>
être	VER:infi	être
représenté	VER:pper	représenter
</VN>
<PP>
comme	ADV	comme
<NP>
le	DET:ART	le
sommet	NOM	sommet
</NP>
</PP>
<PP>
d'	PRP	de
<NP>
un	DET:ART	un
graphe	NOM	graphe
</NP>
</PP>
.	SENT	.
</s>
<s>
<NP>
Les	DET:ART	le
jetons	NOM	jeton
</NP>
<VN>
circulent	VER:pres	circuler
</VN>
<PP>
sur	PRP	sur
<NP>
les	DET:ART	le
arcs	NOM	arc
</NP>
</PP>
<VN>
reliant	VER:ppre	relier
</VN>
<NP>
les	DET:ART	le
sommets	NOM	sommet
</NP>
.	SENT	.
</s>
<s>
<PONCT:S>
Quand	KON	quand
</PONCT:S>
<NP>
deux	NUM	deux
jetons	NOM	jeton
</NP>
<VN>
contenant	VER:ppre	contenir
respectivement	ADV	respectivement
</VN>
<NP>
les	DET:ART	le
valeurs	NOM	valeur
3	NUM	@card@
</NP>
<COORD>
et	KON	et
5	NUM	@card@
</COORD>
<VN>
se	PRO:PER	se
présentent	VER:pres	présenter
</VN>
<PP>
aux	PRP:det	au
<NP>
entrées	NOM	entrée
</NP>
</PP>
<PP>
du	PRP:det	du
<NP>
nœud	NOM	<unknown>
,	PUN	,
</NP>
</PP>
<NP>
celui	PRO:DEM	celui
</NP>
<VN>
-ci	ADV	-ci
exécute	VER:pres	exécuter
</VN>
<NP>
l'	DET:ART	le
opération	NOM	opération
</NP>
<PP>
pour	PRP	pour
<NP>
laquelle	PRO:REL	lequel
</NP>
</PP>
<VN>
il	PRO:PER	il
est	VER:pres	être
</VN>
<VPpart>
conçu	VER:pper	concevoir
(	PUN	(
ici	ADV	ici
</VPpart>
<NP>
une	DET:ART	un
addition	NOM	addition
)	PUN	)
,	PUN	,
</NP>
<VN>
génère	VER:pres	générer
</VN>
<NP>
un	DET:ART	un
jeton	NOM	jeton
en	PRP	en
sortie	NOM	sortie
</NP>
<VN>
représentant	VER:ppre	représenter
</VN>
<NP>
la	DET:ART	le
somme	NOM	somme
(	PUN	(
</NP>
3	NUM	@card@
<NP>
+	SYM	+
5	NUM	@card@
)	PUN	)
,	PUN	,
</NP>
<NP>
8	NUM	@card@
,	PUN	,
</NP>
<COORD>
et	KON	et
</COORD>
<VN>
supprime	VER:pres	supprimer
</VN>
<NP>
les	DET:ART	le
jetons	NOM	jeton
</NP>
<PP>
d'	PRP	de
<NP>
entrées	NOM	entrée
:	PUN	:
</NP>
</PP>
<NP>
L'	DET:ART	le
expression	NOM	expression
</NP>
<AP>
plus	ADV	plus
complexe	ADJ	complexe
z	NOM	z
</AP>
<NP>
=	ADJ	<unknown>
(	PUN	(
x	VER:simp	<unknown>
</NP>
<NP>
+	SYM	+
</NP>
<VN>
y	PRO:PER	y
)	PUN	)
×	NOM	<unknown>
(	PUN	(
x	VER:pper	<unknown>
-	PUN	-
y	PRO:PER	y
)	PUN	)
</VN>
<VN>
correspond	VER:pres	correspondre
au	PRP:det	au
graphe	NOM	graphe
ci-dessous	ADV	ci-dessous
</VN>
.	SENT	.
</s>
<s>
<VN>
On	PRO:PER	on
constate	VER:pres	constater
</VN>
<Ssub>
que	KON	que
</Ssub>
<NP>
le	DET:ART	le
parallélisme	NOM	parallélisme
</NP>
<VN>
est	VER:pres	être
</VN>
<AP>
implicite	ADJ	implicite
:	PUN	:
</AP>
<NP>
les	DET:ART	le
deux	NUM	deux
nœuds	NOM	<unknown>
</NP>
<NP>
+	SYM	+
</NP>
<COORD>
et	KON	et
-	PUN	-
</COORD>
<VN>
sont	VER:pres	être
</VN>
<AP>
activables	ADJ	activable
simultanément	ADV	simultanément
</AP>
.	SENT	.
</s>
<s>
<PP>
Grâce	NOM	grâce
<PP>
à	PRP	à
<NP>
deux	NUM	deux
types	NOM	type
</NP>
</PP>
</PP>
<PP>
de	PRP	de
<NP>
nœuds	NOM	<unknown>
</NP>
</PP>
<AP>
appelés	VER:pper	appeler
</AP>
<NP>
<NP>
"	PUN:cit	"
switch	NOM	<unknown>
"	PUN:cit	"
</NP>
<COORD>
et	KON	et
"	PUN:cit	"
</COORD>
<NP>
merge	NOM	<unknown>
"	PUN:cit	"
,	PUN	,
</NP>
</NP>
<VN>
on	PRO:PER	on
peut	VER:pres	pouvoir
</VN>
<VN>
coder	VER:infi	coder
</VN>
<NP>
la	DET:ART	le
condition	NOM	condition
"	PUN:cit	"
</NP>
<Ssub>
si	KON	si
"	PUN:cit	"
</Ssub>
.	SENT	.
</s>
<s>
<NP>
Le	DET:ART	le
premier	NUM	premier
type	NOM	type
</NP>
<VN>
possède	VER:pres	posséder
</VN>
<NP>
<NP>
deux	NUM	deux
entrées	NOM	entrée
</NP>
<COORD>
et	KON	et
</COORD>
<NP>
deux	NUM	deux
sorties	NOM	sortie
,	PUN	,
</NP>
</NP>
<Ssub>
tandis	KON	tandis
que	KON	que
</Ssub>
<NP>
le	DET:ART	le
second	NOM	second
</NP>
<VN>
possède	VER:pres	posséder
</VN>
<NP>
<NP>
trois	NUM	trois
entrées	NOM	entrée
</NP>
<COORD>
et	KON	et
</COORD>
<NP>
une	DET:ART	un
sortie	NOM	sortie
</NP>
</NP>
.	SENT	.
</s>
<s>
<NP>
Le	DET:ART	le
type	NOM	type
"	PUN:cit	"
switch	NOM	<unknown>
"	PUN:cit	"
</NP>
<VN>
répercutera	VER:futu	répercuter
</VN>
<NP>
son	DET:POS	son
jeton	NOM	jeton
d'	PRP	de
entrée	NOM	entrée
</NP>
<PP>
sur	PRP	sur
<NP>
l'	DET:ART	le
</NP>
</PP>
<NP>
<NP>
une	DET:ART	un
</NP>
<COORD>
ou	KON	ou
</COORD>
<NP>
l'	DET:ART	le
autre	ADJ	autre
</NP>
</NP>
<PP>
de	PRP	de
<NP>
ses	DET:POS	son
sorties	NOM	sortie
</NP>
</PP>
<PP>
suivant	PRP	suivant
<NP>
l'	DET:ART	le
état	NOM	état
</NP>
</PP>
<PP>
de	PRP	de
<NP>
sa	DET:POS	son
seconde	NUM	second
entrée	NOM	entrée
</NP>
</PP>
.	SENT	.
</s>
<s>
<NP>
Le	DET:ART	le
type	NOM	type
"	PUN:cit	"
merge	NOM	<unknown>
"	PUN:cit	"
</NP>
<VN>
fera	VER:futu	faire
</VN>
<NP>
la	DET:ART	le
sélection	NOM	sélection
d'	PRP	de
un	NOM	un
</NP>
<PP>
de	PRP	de
<NP>
ses	DET:POS	son
deux	NUM	deux
jetons	NOM	jeton
d'	PRP	de
entrée	NOM	entrée
</NP>
</PP>
<VN>
suivant	VER:ppre	suivre
</VN>
<NP>
la	DET:ART	le
valeur	NOM	valeur
</NP>
<PP>
d'	PRP	de
<NP>
un	DET:ART	un
troisième	NUM	troisième
</NP>
</PP>
.	SENT	.
</s>
<s>
<PONCT:S>
Schématiquement	ADV	schématiquement
:	PUN	:
</PONCT:S>
<NP>
Voici	ADV	voici
deux	NUM	deux
exemples	NOM	exemple
</NP>
<PP>
de	PRP	de
<NP>
ces	PRO:DEM	ce
instructions	NOM	instruction
,	PUN	,
</NP>
</PP>
<PP>
dans	PRP	dans
<NP>
un	DET:ART	un
test	NOM	test
</NP>
</PP>
<AP>
conditionnel	ADJ	conditionnel
</AP>
<COORD>
et	KON	et
</COORD>
<PP>
dans	PRP	dans
<NP>
une	DET:ART	un
boucle	NOM	boucle
</NP>
</PP>
.	SENT	.
</s>
<s>
<VN>
Notez	VER:pres	noter
</VN>
<NP>
l'	DET:ART	le
initialisation	NOM	initialisation
</NP>
<PP>
à	PRP	à
<NP>
Faux	NOM	fau|faux
</NP>
</PP>
<PP>
sur	PRP	sur
<NP>
le	DET:ART	le
nœud	NOM	<unknown>
"	PUN:cit	"
merge	NOM	<unknown>
"	PUN:cit	"
</NP>
</PP>
<PP>
pour	KON	pour
<NP>
correctement	ADV	correctement
</NP>
</PP>
<VN>
sélectionner	VER:infi	sélectionner
</VN>
<NP>
la	DET:ART	le
valeur	NOM	valeur
</NP>
<PP>
de	PRP	de
<NP>
x.	NOM	<unknown>
</NP>
</PP>
<VPinf>
Pour	KON	pour
mieux	ADV	mieux
</VPinf>
<VN>
comprendre	VER:infi	comprendre
</VN>
<Ssub>
comment	ADV	comment
</Ssub>
<NP>
les	DET:ART	le
programmes	NOM	programme
flot	NOM	flot
</NP>
<PP>
de	PRP	de
<NP>
données	NOM	donnée
</NP>
</PP>
<VN>
peuvent	VER:pres	pouvoir
</VN>
<VN>
être	VER:infi	être
</VN>
<AP>
exécutés	VER:pper	exécuter
</AP>
<PP>
par	PRP	par
<NP>
un	DET:ART	un
ordinateur	NOM	ordinateur
,	PUN	,
</NP>
</PP>
<VN>
il	PRO:PER	il
est	VER:pres	être
</VN>
<AP>
plus	ADV	plus
aisé	ADJ	aisé
</AP>
<VPinf>
de	PRP	de
</VPinf>
<VN>
représenter	VER:infi	représenter
</VN>
<NP>
les	DET:ART	le
graphes	NOM	graphe
</NP>
<PP>
sous	PRP	sous
<PP>
la	DET:ART	le
<PP>
forme	NOM	forme
<PP>
d'	PRP	de
<NP>
une	DET:ART	un
collection	NOM	collection
</NP>
</PP>
</PP>
</PP>
</PP>
<PP>
de	PRP	de
<NP>
structures	NOM	structure
</NP>
</PP>
<VPpart>
reliées	VER:pper	relier
</VPpart>
<PP>
entre	PRP	entre
<NP>
elles	PRO:PER	elle
</NP>
</PP>
<PP>
par	PRP	par
<NP>
des	PRP:det	du
pointeurs	NOM	pointeur
</NP>
</PP>
.	SENT	.
</s>
<s>
<NP>
Le	DET:ART	le
premier	NUM	premier
graphe	NOM	graphe
</NP>
<NP>
z	NOM	z
=	ADJ	<unknown>
(	PUN	(
</NP>
<VN>
x	VER:simp	<unknown>
</VN>
<NP>
+	SYM	+
</NP>
<VN>
y	PRO:PER	y
)	PUN	)
×	NOM	<unknown>
(	PUN	(
x	VER:pper	<unknown>
-	PUN	-
y	PRO:PER	y
)	PUN	)
</VN>
<VN>
peut	VER:pres	pouvoir
</VN>
<VN>
être	VER:infi	être
</VN>
<AP>
représenté	VER:pper	représenter
</AP>
<PP>
par	PRP	par
<NP>
cette	PRO:DEM	ce
structure	NOM	structure
:	PUN	:
</NP>
</PP>
<NP>
Chaque	PRO:IND	chaque
nœud	NOM	<unknown>
</NP>
<VN>
est	VER:pres	être
</VN>
<VPpart>
représenté	VER:pper	représenter
</VPpart>
<PP>
par	PRP	par
<NP>
un	DET:ART	un
bloc	NOM	bloc
</NP>
</PP>
<PP>
dont	PRO:REL	dont
<NP>
le	DET:ART	le
premier	NUM	premier
élément	NOM	élément
</NP>
</PP>
<VN>
est	VER:pres	être
</VN>
<NP>
l'	DET:ART	le
opération	NOM	opération
</NP>
<VPinf>
à	PRP	à
</VPinf>
<VN>
effectuer	VER:infi	effectuer
,	PUN	,
</VN>
<COORD>
puis	ADV	puis
</COORD>
<VN>
suivent	VER:pres	suivre
</VN>
<NP>
les	DET:ART	le
emplacements	NOM	emplacement
</NP>
<VPpart>
indiqués	VER:pper	indiquer
</VPpart>
<PP>
par	PRP	par
<NP>
des	PRP:det	du
parenthèses	NOM	parenthèse
</NP>
</PP>
<COORD>
«	PUN:cit	«
</COORD>
<PP>
[	PUN	[
<NP>
]	PUN	]
»	PUN:cit	»
</NP>
<NP>
qui	PRO:REL	qui
</NP>
</PP>
<VN>
sont	VER:pres	être
</VN>
<VPpart>
destinées	VER:pper	destiner
</VPpart>
<VPinf>
à	PRP	à
</VPinf>
<VN>
contenir	VER:infi	contenir
</VN>
<NP>
les	DET:ART	le
paramètres	NOM	paramètre
</NP>
<PP>
de	PRP	de
<NP>
<NP>
l'	DET:ART	le
opération	NOM	opération
,	PUN	,
</NP>
<COORD>
ainsi	KON	ainsi
que	KON	que
</COORD>
<NP>
des	PRP:det	du
emplacements	NOM	emplacement
</NP>
</NP>
</PP>
<VN>
contenant	VER:ppre	contenir
</VN>
<NP>
les	DET:ART	le
adresses	NOM	adresse
</NP>
<NP>
où	PRO:REL	où
</NP>
<VN>
sera	VER:futu	être
placé	VER:pper	placer
</VN>
<NP>
le	DET:ART	le
résultat	NOM	résultat
</NP>
.	SENT	.
</s>
<s>
<NP>
Certains	PRO:IND	certain
emplacements	NOM	emplacement
</NP>
<VN>
peuvent	VER:pres	pouvoir
éventuellement	ADV	éventuellement
</VN>
<VN>
contenir	VER:infi	contenir
</VN>
<NP>
des	PRP:det	du
constantes	NOM	constante
</NP>
.	SENT	.
</s>
<s>
<NP>
Les	DET:ART	le
itérations	NOM	itération
</NP>
<VN>
ne	ADV	ne
posent	VER:pres	poser
pas	ADV	pas
</VN>
<NP>
de	PRP	de
problème	NOM	problème
</NP>
<AP>
non	ADV	non
plus	ADV	plus
,	PUN	,
ci-dessous	ADV	ci-dessous
</AP>
<NP>
la	DET:ART	le
structure	NOM	structure
</NP>
<PP>
de	PRP	de
<NP>
la	DET:ART	le
boucle	NOM	boucle
</NP>
</PP>
<AP>
WHILE	NAM	<unknown>
</AP>
<VPpart>
précédemment	ADV	précédemment
évoquée	VER:pper	évoquer
:	PUN	:
</VPpart>
<VN>
Il	PRO:PER	il
existe	VER:pres	exister
</VN>
<NP>
plusieurs	PRO:IND	plusieurs
types	NOM	type
</NP>
<PP>
d'	PRP	de
<NP>
ordinateur	ADJ	ordinateur
flot	NOM	flot
</NP>
</PP>
<PP>
de	PRP	de
<NP>
données	NOM	donnée
,	PUN	,
</NP>
</PP>
<COORD>
mais	KON	mais
</COORD>
<VN>
on	PRO:PER	on
peut	VER:pres	pouvoir
</VN>
<VN>
distinguer	VER:infi	distinguer
</VN>
<NP>
deux	NUM	deux
modèles	NOM	modèle
:	PUN	:
</NP>
<NP>
Des	PRP:det	du
machines	NOM	machine
</NP>
<AP>
hybrides	ADJ	hybride
</AP>
<NP>
dataflow/von	NOM	<unknown>
Neumann	NAM	Neumann
</NP>
<VN>
ont	VER:pres	avoir
aussi	ADV	aussi
été	VER:pper	être
conçues	VER:pper	concevoir
(	PUN	(
</VN>
<VN>
MIT	VER:simp	mettre
</VN>
<NP>
P-RISC	NAM	<unknown>
)	PUN	)
</NP>
.	SENT	.
</s>
<s>
<VN>
Rentrent	VER:pres	rentrer
</VN>
<PP>
dans	PRP	dans
<NP>
cette	PRO:DEM	ce
catégorie	NOM	catégorie
</NP>
</PP>
<NP>
la	DET:ART	le
machine	NOM	machine
</NP>
<VPpart>
conçue	VER:pper	concevoir
</VPpart>
<PP>
par	PRP	par
<NP>
Jack	NAM	Jack
Dennis	NAM	<unknown>
du	PRP:det	du
Massachusetts	NOM	<unknown>
</NP>
</PP>
<VN>
Institute	VER:subp	<unknown>
</VN>
<NP>
of	VER:pper	<unknown>
Technology	NAM	<unknown>
</NP>
<PP>
en	PRP	en
<NP>
1974	NUM	@card@
</NP>
</PP>
.	SENT	.
</s>
<s>
<NP>
La	DET:ART	le
difficulté	NOM	difficulté
</NP>
<VPpart>
rencontrée	VER:pper	rencontrer
</VPpart>
<PP>
sur	PRP	sur
<NP>
cette	PRO:DEM	ce
architecture	NOM	architecture
</NP>
</PP>
<VN>
est	VER:pres	être
</VN>
<NP>
la	DET:ART	le
contrainte	NOM	contrainte
</NP>
<VPinf>
de	PRP	de
</VPinf>
<VN>
n'	ADV	ne
avoir	VER:infi	avoir
qu'	KON	que
</VN>
<NP>
une	DET:ART	un
seule	ADJ	seul
valeur	NOM	valeur
(	PUN	(
</NP>
<NP>
jeton	NOM	jeton
)	PUN	)
</NP>
<PP>
sur	PRP	sur
<NP>
un	DET:ART	un
arc	NOM	arc
</NP>
</PP>
<PP>
à	PRP	à
<NP>
un	DET:ART	un
moment	NOM	moment
</NP>
</PP>
<VPpart>
donné	VER:pper	donner
(	PUN	(
</VPpart>
<COORD>
car	KON	car
</COORD>
<VN>
on	PRO:PER	on
ne	ADV	ne
peut	VER:pres	pouvoir
pas	ADV	pas
</VN>
<VN>
faire	VER:infi	faire
</VN>
<PP>
de	PRP	de
<PP>
différence	NOM	différence
<PP>
entre	PRP	entre
<NP>
les	DET:ART	le
jetons	NOM	jeton
)	PUN	)
</NP>
</PP>
</PP>
</PP>
.	SENT	.
</s>
<s>
<VN>
Elle	PRO:PER	elle
est	VER:pres	être
</VN>
<VPpart>
effacée	VER:pper	effacer
</VPpart>
<PP>
par	PRP	par
<NP>
l'	DET:ART	le
utilisation	NOM	utilisation
</NP>
</PP>
<PP>
de	PRP	de
<NP>
jetons	NOM	jeton
</NP>
</PP>
<PP>
de	PRP	de
<NP>
contrôles	NOM	contrôle
</NP>
</PP>
<NP>
qui	PRO:REL	qui
</NP>
<VN>
acquiescent	VER:pres	acquiescer
</VN>
<NP>
la	DET:ART	le
transmission	NOM	transmission
</NP>
<PP>
des	PRP:det	du
<NP>
données	NOM	donnée
</NP>
</PP>
<PP>
d'	PRP	de
<NP>
un	DET:ART	un
nœud	NOM	<unknown>
</NP>
</PP>
<PP>
à	PRP	à
<NP>
un	DET:ART	un
autre	ADJ	autre
</NP>
</PP>
.	SENT	.
</s>
<s>
<NP>
Ces	PRO:DEM	ce
machines	NOM	machine
</NP>
<VN>
associent	VER:pres	associer
</VN>
<NP>
un	DET:ART	un
marqueur	NOM	marqueur
(	PUN	(
</NP>
<NP>
<NP>
tag	NOM	<unknown>
)	PUN	)
,	PUN	,
</NP>
<COORD>
ou	KON	ou
</COORD>
<NP>
une	DET:ART	un
couleur	NOM	couleur
,	PUN	,
</NP>
</NP>
<PP>
à	PRP	à
<NP>
chaque	PRO:IND	chaque
jeton	NOM	jeton
</NP>
</PP>
.	SENT	.
</s>
<s>
<NP>
La	DET:ART	le
règle	NOM	règle
</NP>
<PP>
de	PRP	de
<NP>
base	NOM	base
</NP>
</PP>
<VN>
est	VER:pres	être
</VN>
<AP>
modifiée	VER:pper	modifier
,	PUN	,
</AP>
<COORD>
et	KON	et
</COORD>
<VN>
devient	VER:pres	devenir
:	PUN	:
</VN>
<Ssub>
lorsqu'	KON	lorsque
</Ssub>
<NP>
un	DET:ART	un
nœud	NOM	<unknown>
</NP>
<VN>
voit	VER:pres	voir
</VN>
<NP>
toutes	PRO:IND	tout
ses	DET:POS	son
entrées	NOM	entrée
</NP>
<VN>
satisfaites	VER:pres	satisfaire
</VN>
<PP>
par	PRP	par
<NP>
des	PRP:det	du
jetons	NOM	jeton
</NP>
</PP>
<PP>
de	PRP	de
<NP>
même	ADJ	même
couleur	NOM	couleur
,	PUN	,
</NP>
</PP>
<VN>
il	PRO:PER	il
est	VER:pres	être
</VN>
<VPpart>
activé	VER:pper	activer
</VPpart>
<COORD>
et	KON	et
</COORD>
<VN>
produit	VER:pres	produire
</VN>
<NP>
une	DET:ART	un
valeur	NOM	valeur
</NP>
<PP>
en	PRP	en
<NP>
sortie	NOM	sortie
,	PUN	,
</NP>
</PP>
<PP>
avec	PRP	avec
<NP>
<NP>
sa	DET:POS	son
propre	ADJ	propre
couleur	NOM	couleur
,	PUN	,
</NP>
<COORD>
et	KON	et
</COORD>
<NP>
les	DET:ART	le
marqueur	NOM	marqueur
</NP>
</NP>
</PP>
<COORD>
et	KON	et
</COORD>
<NP>
jetons	NOM	jeton
d'	PRP	de
entrées	NOM	entrée
</NP>
<VN>
sont	VER:pres	être
«	PUN:cit	«
effacés	VER:pper	effacer
»	PUN:cit	»
</VN>
.	SENT	.
</s>
<s>
<NP>
L'	DET:ART	le
architecture	NOM	architecture
</NP>
<VN>
en	PRO:PER	en
est	VER:pres	être
simplifié	VER:pper	simplifier
,	PUN	,
</VN>
<COORD>
et	KON	et
</COORD>
<NP>
le	DET:ART	le
dépliage	NOM	dépliage
</NP>
<PP>
des	PRP:det	du
<NP>
boucles	NOM	boucle
</NP>
</PP>
<VN>
se	PRO:PER	se
fait	VER:pres	faire
</VN>
<AP>
tout	ADV	tout
seul	ADJ	seul
:	PUN	:
</AP>
<VN>
il	PRO:PER	il
est	VER:pres	être
créé	VER:pper	créer
</VN>
<PP>
autant	ADV	autant
<PP>
de	PRP	de
<NP>
couleurs/jetons	NOM	<unknown>
</NP>
</PP>
</PP>
<Ssub>
que	KON	que
</Ssub>
<AP>
nécessaire	ADJ	nécessaire
</AP>
.	SENT	.
</s>
<s>
<NP>
Son	DET:POS	son
architecture	NOM	architecture
</NP>
<VPpart>
simplifiée	VER:pper	simplifier
est	VER:pres	être
</VPpart>
<VPpart>
représentée	VER:pper	représenter
</VPpart>
<PP>
par	PRP	par
<NP>
la	DET:ART	le
figure	NOM	figure
ci	ADV	ci
à	PRP	à
droite	NOM	droit|droite
</NP>
</PP>
.	SENT	.
</s>
<s>
<VN>
Elle	PRO:PER	elle
est	VER:pres	être
</VN>
<VPpart>
volontairement	ADV	volontairement
simplifiée	VER:pper	simplifier
,	PUN	,
</VPpart>
<COORD>
mais	KON	mais
</COORD>
<VN>
est	VER:pres	être
</VN>
<AdP>
tout	ADV	tout
à	PRP	à
fait	NOM	fait
</AdP>
<AP>
représentative	ADJ	représentatif
</AP>
<PP>
des	PRP:det	du
<NP>
machines	NOM	machine
</NP>
</PP>
<PP>
de	PRP	de
<NP>
type	NOM	type
</NP>
</PP>
<AP>
dynamique	ADJ	dynamique
</AP>
.	SENT	.
</s>
<s>
<VN>
On	PRO:PER	on
remarque	VER:pres	remarquer
immédiatement	ADV	immédiatement
</VN>
<Ssub>
qu'	KON	que
</Ssub>
<VN>
elle	PRO:PER	elle
est	VER:pres	être
</VN>
<AdP>
très	ADV	très
facilement	ADV	facilement
«	PUN:cit	«
</AdP>
<NP>
pipelinable	NOM	<unknown>
»	PUN:cit	»
,	PUN	,
</NP>
<NP>
ce	PRO:DEM	ce
</NP>
<NP>
qui	PRO:REL	qui
</NP>
<VN>
bien	ADV	bien
sûr	ADJ	sûr
améliore	VER:pres	améliorer
sensiblement	ADV	sensiblement
</VN>
<NP>
les	DET:ART	le
performances	NOM	performance
</NP>
.	SENT	.
</s>
<s>
<VN>
Il	PRO:PER	il
est	VER:pres	être
</VN>
<VPpart>
spécifié	VER:pper	spécifier
</VPpart>
<PP>
en	PRP	en
<NP>
caractères	NOM	caractère
</NP>
</PP>
<AP>
italiques	ADJ	italique
</AP>
<NP>
le	DET:ART	le
type	NOM	type
</NP>
<PP>
de	PRP	de
<NP>
paquets	NOM	paquet
</NP>
</PP>
<VN>
circulant	VER:ppre	circuler
</VN>
<PP>
entre	PRP	entre
<NP>
deux	NUM	deux
unités	NOM	unité
</NP>
</PP>
.	SENT	.
</s>
<s>
<NP>
Les	DET:ART	le
jetons	NOM	jeton
</NP>
<VN>
appartenant	VER:ppre	appartenir
</VN>
<PP>
à	PRP	à
<NP>
une	DET:ART	un
même	ADJ	même
instruction	NOM	instruction
</NP>
</PP>
<VN>
sont	VER:pres	être
</VN>
<VPpart>
appairés	VER:pper	<unknown>
</VPpart>
<PP>
dans	PRP	dans
<NP>
l'	DET:ART	le
unité	NOM	unité
</NP>
</PP>
<PP>
de	PRP	de
<NP>
correspondance	NOM	correspondance
</NP>
</PP>
.	SENT	.
</s>
<s>
<VN>
Ils	PRO:PER	il
sont	VER:pres	être
</VN>
<VPpart>
envoyés	VER:pper	envoyer
</VPpart>
<PP>
vers	PRP	vers
<NP>
l'	DET:ART	le
unité	NOM	unité
</NP>
</PP>
<NP>
où	PRO:REL	où
</NP>
<VN>
sont	VER:pres	être
stockées	VER:pper	stocker
</VN>
<NP>
les	DET:ART	le
instructions	NOM	instruction
,	PUN	,
</NP>
<PP>
d'	PRP	de
<NP>
où	PRO:REL	où
</NP>
</PP>
<VN>
ils	PRO:PER	il
chargent	VER:pres	charger
</VN>
<NP>
les	DET:ART	le
instructions	NOM	instruction
</NP>
<PP>
dont	PRO:REL	dont
<VN>
ils	PRO:PER	il
dépendent	VER:pres	dépendre
</VN>
</PP>
.	SENT	.
</s>
<s>
<NP>
Ces	PRO:DEM	ce
paquets	NOM	paquet
enfin	ADV	enfin
exécutables	ADJ	exécutable
</NP>
<VN>
sont	VER:pres	être
</VN>
<AP>
dirigés	VER:pper	diriger
</AP>
<PP>
vers	PRP	vers
<NP>
l'	DET:ART	le
unité	NOM	unité
</NP>
</PP>
<PP>
de	PRP	de
<NP>
calcul	NOM	calcul
</NP>
</PP>
<NP>
qui	PRO:REL	qui
</NP>
<PP>
à	PRP	à
<PP>
la	DET:ART	le
<PP>
suite	NOM	suite
<PP>
de	PRP	de
<NP>
l'	DET:ART	le
exécution	NOM	exécution
</NP>
</PP>
</PP>
</PP>
</PP>
<PP>
de	PRP	de
<NP>
l'	DET:ART	le
instruction	NOM	instruction
</NP>
</PP>
<VPpart>
reçue	VER:pper	recevoir
</VPpart>
<PP>
en	PRP	en
<NP>
entrée	NOM	entrée
</NP>
</PP>
<VN>
va	VER:pres	aller
</VN>
<VN>
émettre	VER:infi	émettre
</VN>
<NP>
de	PRP	de
nouveaux	ADJ	nouveau
jetons	NOM	jeton
</NP>
.	SENT	.
</s>
<s>
<NP>
L'	DET:ART	le
unité	NOM	unité
d'	PRP	de
entrée/sortie	NOM	<unknown>
</NP>
<VN>
sert	VER:pres	servir
</VN>
<VPinf>
à	PRP	à
</VPinf>
<VN>
communiquer	VER:infi	communiquer
</VN>
<PP>
avec	PRP	avec
<NP>
l'	DET:ART	le
ordinateur	NOM	ordinateur
</NP>
</PP>
<AP>
externe	ADJ	externe
</AP>
<NP>
qui	PRO:REL	qui
</NP>
<VN>
contrôle	VER:pres	contrôler
</VN>
<NP>
la	DET:ART	le
machine	NOM	machine
dataflow	NOM	<unknown>
,	PUN	,
</NP>
<PP>
par	PRP	par
<NP>
le	DET:ART	le
biais	NOM	biais
</NP>
</PP>
<PP>
du	PRP:det	du
<NP>
bus	NOM	bus
</NP>
</PP>
<VPpart>
schématisé	VER:pper	schématiser
verticalement	ADV	verticalement
,	PUN	,
</VPpart>
<NP>
qui	PRO:REL	qui
</NP>
<VN>
permet	VER:pres	permettre
</VN>
<NP>
l'	DET:ART	le
injection	NOM	injection
</NP>
<PP>
de	PRP	de
<NP>
<NP>
paquets	NOM	paquet
</NP>
<COORD>
ou	KON	ou
bien	ADV	bien
</COORD>
<NP>
leur	DET:POS	leur
récupération	NOM	récupération
</NP>
</NP>
</PP>
.	SENT	.
</s>
<s>
<NP>
La	DET:ART	le
file	NOM	file
d'	PRP	de
attente	NOM	attente
«	PUN:cit	«
</NP>
<AP>
jetons	NOM	jeton
»	PUN:cit	»
</AP>
<VN>
est	VER:pres	être
simplement	ADV	simplement
</VN>
<NP>
une	DET:ART	un
mémoire	NOM	mémoire
</NP>
<NP>
tampon	NOM	tampon
FIFO	NAM	<unknown>
</NP>
.	SENT	.
</s>
<s>
<NP>
Les	DET:ART	le
jetons	NOM	jeton
</NP>
<VN>
sont	VER:pres	être
formés	VER:pper	former
</VN>
<NP>
de	PRP	de
:	PUN	:
Étant	VER:ppre	être
</NP>
<Ssub>
donné	NOM	donné
que	KON	que
</Ssub>
<NP>
<NP>
de	PRP	de
larges	ADJ	large
itérations	NOM	itération
</NP>
<COORD>
ou	KON	ou
</COORD>
<NP>
de	PRP	de
vastes	ADJ	vaste
ensembles	NOM	ensemble
</NP>
</NP>
<PP>
de	PRP	de
<NP>
données	NOM	donnée
</NP>
</PP>
<VN>
peuvent	VER:pres	pouvoir
</VN>
<VN>
provoquer	VER:infi	provoquer
</VN>
<NP>
un	DET:ART	un
dépassement	NOM	dépassement
de	PRP	de
capacité	NOM	capacité
(	PUN	(
</NP>
<PP>
en	PRP	en
<NP>
nombre	NOM	nombre
</NP>
</PP>
<PP>
de	PRP	de
<NP>
jetons	NOM	jeton
)	PUN	)
,	PUN	,
</NP>
</PP>
<NP>
une	DET:ART	un
unité	NOM	unité
</NP>
<AP>
particulière	ADJ	particulier
</AP>
<VN>
est	VER:pres	être
</VN>
<AP>
couplée	VER:pper	coupler
</AP>
<PP>
à	PRP	à
<NP>
l'	DET:ART	le
unité	NOM	unité
</NP>
</PP>
<PP>
de	PRP	de
<NP>
correspondance	NOM	correspondance
</NP>
</PP>
<VPinf>
pour	PRP	pour
</VPinf>
<VN>
pallier	VER:infi	pallier
</VN>
<NP>
ce	PRO:DEM	ce
cas	NOM	cas
</NP>
.	SENT	.
</s>
<s>
<NP>
L'	DET:ART	le
unité	NOM	unité
</NP>
<PP>
de	PRP	de
<NP>
calcul	NOM	calcul
</NP>
</PP>
<VN>
va	VER:pres	aller
bien	ADV	bien
sûr	ADJ	sûr
</VN>
<VN>
contenir	VER:infi	contenir
</VN>
<NP>
plusieurs	PRO:IND	plusieurs
unités	NOM	unité
</NP>
<AP>
arithmétiques	ADJ	arithmétique
</AP>
<COORD>
et	KON	et
</COORD>
<AP>
logiques	ADJ	logique
</AP>
<VPinf>
pour	PRP	pour
</VPinf>
<VN>
permettre	VER:infi	permettre
</VN>
<VPinf>
d'	PRP	de
</VPinf>
<VN>
exécuter	VER:infi	exécuter
</VN>
<NP>
les	DET:ART	le
instructions	NOM	instruction
</NP>
<PP>
en	PRP	en
<NP>
parallèle	NOM	parallèle
</NP>
</PP>
.	SENT	.
</s>
<s>
<NP>
<NP>
Les	DET:ART	le
premières	NUM	premier
idées	NOM	idée
</NP>
<COORD>
et	KON	et
</COORD>
<NP>
concepts	NOM	concept
</NP>
</NP>
<NP>
qui	PRO:REL	qui
</NP>
<VN>
ont	VER:pres	avoir
donné	VER:pper	donner
lieu	NOM	lieu
</VN>
<PP>
à	PRP	à
<NP>
ces	PRO:DEM	ce
architectures	NOM	architecture
</NP>
</PP>
<VN>
sont	VER:pres	être
</VN>
<VPpart>
nés	VER:pper	naître
</VPpart>
<PP>
dans	PRP	dans
<NP>
les	DET:ART	le
années	NOM	année
1960	NUM	@card@
</NP>
</PP>
.	SENT	.
</s>
<s>
<NP>
Les	DET:ART	le
premiers	NOM	premier
ordinateurs	ADJ	ordinateur
</NP>
<PP>
de	PRP	de
<NP>
ce	PRO:DEM	ce
type	NOM	type
</NP>
</PP>
<VN>
sont	VER:pres	être
</VN>
<VPpart>
nés	VER:pper	naître
</VPpart>
<PP>
au	PRP:det	au
<PP>
début	NOM	début
<PP>
des	PRP:det	du
<NP>
années	NOM	année
1970	NUM	@card@
</NP>
</PP>
</PP>
</PP>
<PP>
d'abord	ADV	d'abord
<PP>
aux	PRP:det	au
<NP>
États-Unis	NAM	États-Unis
</NP>
</PP>
</PP>
<COORD>
et	KON	et
</COORD>
<PP>
au	PRP:det	au
<NP>
Japon	NAM	Japon
,	PUN	,
</NP>
</PP>
<COORD>
mais	KON	mais
aussi	ADV	aussi
</COORD>
<PP>
en	PRP	en
<NP>
France	NAM	France
</NP>
</PP>
<PP>
avec	PRP	avec
<NP>
le	DET:ART	le
LAU	NAM	<unknown>
(	PUN	(
</NP>
</PP>
<NP>
Langage	NOM	langage
</NP>
<PP>
à	PRP	à
<NP>
Assignation	NOM	assignation
Unique	ADJ	unique
,	PUN	,
CERT-ONERA	NAM	<unknown>
</NP>
</PP>
<PP>
de	PRP	de
<NP>
Toulouse	NAM	Toulouse
)	PUN	)
</NP>
</PP>
.	SENT	.
</s>
<s>
<NP>
Les	DET:ART	le
constructeurs	NOM	constructeur
</NP>
<NP>
qui	PRO:REL	qui
</NP>
<VN>
se	PRO:PER	se
sont	VER:pres	être
</VN>
<VPpart>
impliqués	VER:pper	impliquer
</VPpart>
<VN>
sont	VER:pres	être
:	PUN	:
</VN>
<VN>
Texas	VER:simp	<unknown>
</VN>
<NP>
Instruments	NOM	instrument
,	PUN	,
</NP>
<NP>
NEC	ABR	NEC
,	PUN	,
</NP>
<NP>
OKI	NAM	<unknown>
etc	ABR	etc
</NP>
.	SENT	.
</s>
<s>
<NP>
Certaines	PRO:IND	certain
machines	NOM	machine
</NP>
<VN>
ont	VER:pres	avoir
été	VER:pper	être
construites	VER:pper	construire
</VN>
<PP>
sur	PRP	sur
<NP>
la	DET:ART	le
base	NOM	base
</NP>
</PP>
<PP>
de	PRP	de
<NP>
microprocesseurs	NOM	microprocesseur
</NP>
</PP>
<AP>
tel	PRO:DEM	tel
</AP>
<Ssub>
que	PRO:REL	que
</Ssub>
<NP>
<NP>
le	DET:ART	le
Zilog	NAM	<unknown>
Z8001	NAM	<unknown>
</NP>
<COORD>
et	KON	et
</COORD>
<NP>
Motorola	NAM	<unknown>
</NP>
</NP>
<NP>
88110	NUM	@card@
</NP>
<COORD>
ou	KON	ou
bien	ADV	bien
encore	ADV	encore
</COORD>
<PP>
des	PRP:det	du
<NP>
microprocesseurs	NOM	microprocesseur
</NP>
</PP>
<PP>
en	PRP	en
<NP>
tranches	NOM	tranche
AMD	NAM	<unknown>
</NP>
</PP>
.	SENT	.
</s>
<s>
<VN>
Il	PRO:PER	il
est	VER:pres	être
</VN>
<AdP>
tout	ADV	tout
à	PRP	à
fait	NOM	fait
</AdP>
<AP>
possible	ADJ	possible
</AP>
<Ssub>
que	KON	que
</Ssub>
<NP>
le	DET:ART	le
dataflow	NOM	<unknown>
soit	VER:subp	être
</NP>
<VPpart>
remis	VER:pper	remettre
</VPpart>
<PP>
au	PRP:det	au
<NP>
"	PUN:cit	"
goût	NOM	goût
</NP>
</PP>
<PP>
du	PRP:det	du
<NP>
jour	NOM	jour
"	PUN:cit	"
</NP>
</PP>
<PP>
sous	PRP	sous
<PP>
forme	NOM	forme
<PP>
d'	PRP	de
<NP>
un	DET:ART	un
superordinateur	NOM	<unknown>
</NP>
</PP>
</PP>
</PP>
.	SENT	.
</s>
