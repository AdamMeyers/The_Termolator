<s>
<NP>
Vecteur	ADJ	vecteur
(	PUN	(
structure	NOM	structure
</NP>
<PP>
de	PRP	de
<NP>
données	NOM	donnée
)	PUN	)
</NP>
</PP>
<PP>
En	PRP	en
<NP>
informatique	NOM	informatique
,	PUN	,
</NP>
</PP>
<NP>
un	DET:ART	un
vecteur	NOM	vecteur
</NP>
<VN>
désigne	VER:pres	désigner
</VN>
<NP>
un	DET:ART	un
conteneur	NOM	conteneur
d'	PRP	de
éléments	NOM	élément
</NP>
<VPpart>
ordonnés	VER:pper	ordonner
</VPpart>
<COORD>
et	KON	et
</COORD>
<VPpart>
accessibles	ADJ	accessible
</VPpart>
<PP>
par	PRP	par
<NP>
des	PRP:det	du
indices	NOM	indice
,	PUN	,
</NP>
</PP>
<PP>
dont	PRO:REL	dont
<NP>
la	DET:ART	le
taille	NOM	taille
</NP>
</PP>
<VN>
est	VER:pres	être
</VN>
<AP>
dynamique	ADJ	dynamique
:	PUN	:
</AP>
<VN>
elle	PRO:PER	elle
est	VER:pres	être
mise	VER:pper	mettre
à	PRP	à
jour	NOM	jour
automatiquement	ADV	automatiquement
</VN>
<PP>
lors	ADV	lors
<PP>
d'	PRP	de
<NP>
ajouts	NOM	ajout
</NP>
</PP>
</PP>
<COORD>
ou	KON	ou
</COORD>
<PP>
de	PRP	de
<NP>
suppressions	NOM	suppression
d'	PRP	de
éléments	NOM	élément
</NP>
</PP>
.	SENT	.
</s>
<s>
<VN>
On	PRO:PER	on
retrouve	VER:pres	retrouver
</VN>
<NP>
les	DET:ART	le
vecteurs	NOM	vecteur
</NP>
<PP>
dans	PRP	dans
<NP>
de	PRP	de
nombreux	ADJ	nombreux
langages	NOM	langage
</NP>
</PP>
<PP>
de	PRP	de
<NP>
programmation	NOM	programmation
,	PUN	,
</NP>
</PP>
<PP>
notamment	ADV	notamment
<NP>
<NP>
le	DET:ART	le
C++	NAM	<unknown>
</NP>
<COORD>
et	KON	et
</COORD>
<NP>
le	DET:ART	le
Java	NOM	java
</NP>
</NP>
</PP>
.	SENT	.
</s>
<s>
<VN>
Ils	PRO:PER	il
sont	VER:pres	être
alors	ADV	alors
inclus	VER:pper	inclure
</VN>
<PP>
dans	PRP	dans
<NP>
<NP>
des	PRP:det	du
bibliothèques	NOM	bibliothèque
</NP>
<COORD>
et	KON	et
</COORD>
<NP>
l'	DET:ART	le
utilisateur	NOM	utilisateur
</NP>
</NP>
</PP>
<VN>
n'	ADV	ne
a	VER:pres	avoir
pas	ADV	pas
</VN>
<NP>
besoin	NOM	besoin
</NP>
<VPinf>
d'	PRP	de
</VPinf>
<VN>
en	PRO:PER	en
programmer	VER:infi	programmer
</VN>
<NP>
un	NUM	un
</NP>
.	SENT	.
</s>
<s>
<PONCT:S>
En	PRP	en
</PONCT:S>
<NP>
langage	NOM	langage
objet	NOM	objet
,	PUN	,
</NP>
<NP>
la	DET:ART	le
classe	NOM	classe
</NP>
<AP>
vecteur	ADJ	vecteur
</AP>
<VN>
est	VER:pres	être
</VN>
<AP>
généralement	ADV	généralement
polymorphe	ADJ	polymorphe
,	PUN	,
</AP>
<Ssub>
c'est-à-dire	ADV	c'est-à-dire
qu'	KON	que
</Ssub>
<VN>
il	PRO:PER	il
est	VER:pres	être
</VN>
<AP>
possible	ADJ	possible
</AP>
<VPinf>
de	PRP	de
</VPinf>
<VN>
l'	PRO:PER	la|le
utiliser	VER:infi	utiliser
</VN>
<PP>
avec	PRP	avec
<NP>
n'	ADV	ne
importe	VER:pres	importer
quel	PRO:REL	quel
</NP>
</PP>
<VN>
type	VER:pres	typer
d'	PRP	de
objet	NOM	objet
</VN>
.	SENT	.
</s>
<s>
<NP>
Exemple	NOM	exemple
</NP>
<PP>
de	PRP	de
<NP>
manipulation	NOM	manipulation
</NP>
</PP>
<PP>
d'	PRP	de
<NP>
un	DET:ART	un
vecteur	NOM	vecteur
</NP>
</PP>
<PP>
en	PRP	en
<NP>
C++	NAM	<unknown>
:	PUN	:
</NP>
</PP>
<NP>
Le	DET:ART	le
vecteur	NOM	vecteur
</NP>
<VPpart>
utilisé	VER:pper	utiliser
ici	ADV	ici
est	VER:pres	être
</VPpart>
.	SENT	.
</s>
<s>
<NP>
Le	DET:ART	le
codice_1	NOM	<unknown>
</NP>
<VN>
est	VER:pres	être
</VN>
<NP>
un	DET:ART	un
modèle	NOM	modèle
</NP>
.	SENT	.
</s>
<s>
<VN>
On	PRO:PER	on
peut	VER:pres	pouvoir
donc	ADV	donc
</VN>
<VN>
l'	PRO:PER	la|le
utiliser	VER:infi	utiliser
</VN>
<PP>
avec	PRP	avec
<NP>
n'	ADV	ne
importe	VER:pres	importer
quel	PRO:REL	quel
type	NOM	type
</NP>
</PP>
.	SENT	.
</s>
<s>
<PONCT:S>
Par	PRP	par
exemple	NOM	exemple
,	PUN	,
</PONCT:S>
<VPinf>
pour	PRP	pour
</VPinf>
<VN>
faire	VER:infi	faire
</VN>
<NP>
un	DET:ART	un
vecteur	NOM	vecteur
</NP>
<PP>
de	PRP	de
<NP>
codice_2	NOM	<unknown>
,	PUN	,
</NP>
</PP>
<VN>
il	PRO:PER	il
faut	VER:pres	falloir
</VN>
<VN>
écrire	VER:infi	écrire
</VN>
<NP>
codice_3	NOM	<unknown>
</NP>
.	SENT	.
</s>
<s>
<NP>
L'	DET:ART	le
allocation	NOM	allocation
de	PRP	de
mémoire	NOM	mémoire
</NP>
<PP>
d'	PRP	de
<NP>
un	DET:ART	un
vecteur	NOM	vecteur
</NP>
</PP>
<VN>
se	PRO:PER	se
fait	VER:pres	faire
généralement	ADV	généralement
</VN>
<VPpart>
en	PRP	en
</VPpart>
<VN>
doublant	VER:ppre	doubler
</VN>
<NP>
sa	DET:POS	son
capacité	NOM	capacité
</NP>
<Ssub>
lorsque	KON	lorsque
</Ssub>
<NP>
sa	DET:POS	son
taille	NOM	taille
(	PUN	(
</NP>
<NP>
le	DET:ART	le
nombre	NOM	nombre
</NP>
<AP>
d’	ADJ	<unknown>
</AP>
<NP>
éléments	NOM	élément
)	PUN	)
</NP>
<VN>
égale	VER:pres	égaler
</VN>
<NP>
sa	DET:POS	son
capacité	NOM	capacité
(	PUN	(
</NP>
<NP>
le	DET:ART	le
nombre	NOM	nombre
</NP>
<PP>
d'	PRP	de
<NP>
octets	NOM	octet
</NP>
</PP>
<VPpart>
allouées	VER:pper	allouer
)	PUN	)
</VPpart>
.	SENT	.
</s>
<s>
<VPinf>
Pour	PRP	pour
</VPinf>
<VN>
voir	VER:infi	voir
</VN>
<VN>
évoluer	VER:infi	évoluer
</VN>
<NP>
sa	DET:POS	son
capacité	NOM	capacité
,	PUN	,
</NP>
<NP>
le	DET:ART	le
codice_1	NOM	<unknown>
</NP>
<AP>
dispose	ADJ	dispos
</AP>
<PP>
des	PRP:det	du
<NP>
méthodes	NOM	méthode
</NP>
</PP>
<AP>
codice_5	ADJ	<unknown>
</AP>
<COORD>
et	KON	et
</COORD>
<AP>
codice_6	ADJ	<unknown>
:	PUN	:
</AP>
<NP>
Le	DET:ART	le
</NP>
<AP>
graphique	NOM	graphique
</AP>
<PP>
ci-dessous	ADV	ci-dessous
<VN>
représentant	VER:ppre	représenter
</VN>
</PP>
<NP>
la	DET:ART	le
capacité	NOM	capacité
</NP>
<PP>
en	PRP	en
<PP>
fonction	NOM	fonction
<PP>
de	PRP	de
<NP>
la	DET:ART	le
taille	NOM	taille
</NP>
</PP>
</PP>
</PP>
<VN>
permet	VER:pres	permettre
</VN>
<VPinf>
de	PRP	de
</VPinf>
<VN>
voir	VER:infi	voir
</VN>
<Ssub>
qu'	KON	que
</Ssub>
<PP>
avec	PRP	avec
<NP>
le	DET:ART	le
codice_1	NOM	<unknown>
,	PUN	,
</NP>
</PP>
<NP>
la	DET:ART	le
capacité	NOM	capacité
</NP>
<VN>
augmente	VER:pres	augmenter
</VN>
<NP>
de	PRP	de
50	NUM	@card@
</NP>
<NP>
%	SYM	%
environ	ADV	environ
</NP>
<Ssub>
à	PRP	à
chaque	PRO:IND	chaque
fois	NOM	foi|fois
que	KON	que
</Ssub>
<NP>
<NP>
la	DET:ART	le
taille	NOM	taille
</NP>
<COORD>
et	KON	et
</COORD>
<NP>
la	DET:ART	le
capacité	NOM	capacité
</NP>
</NP>
<VN>
sont	VER:pres	être
</VN>
<AP>
égaux	ADJ	égal
</AP>
.	SENT	.
</s>
<s>
<Ssub>
Si	KON	si
</Ssub>
<NP>
ce	PRO:DEM	ce
nombre	NOM	nombre
</NP>
<VN>
est	VER:pres	être
</VN>
<AP>
trop	ADV	trop
faible	ADJ	faible
,	PUN	,
</AP>
<VN>
il	PRO:PER	il
y	PRO:PER	y
aura	VER:futu	avoir
trop	ADV	trop
</VN>
<PP>
de	PRP	de
<NP>
ré-allocations	NOM	<unknown>
</NP>
</PP>
.	SENT	.
</s>
<s>
<Ssub>
S'	PRO:PER	se
</Ssub>
<VN>
il	PRO:PER	il
est	VER:pres	être
</VN>
<AP>
trop	ADV	trop
élevé	VER:pper	élever
,	PUN	,
</AP>
<VN>
il	PRO:PER	il
prendra	VER:futu	prendre
</VN>
<NP>
trop	ADV	trop
de	PRP	de
mémoire	NOM	mémoire
</NP>
.	SENT	.
</s>
<s>
<PP>
Dans	PRP	dans
<NP>
les	DET:ART	le
deux	NUM	deux
cas	NOM	cas
,	PUN	,
</NP>
</PP>
<NP>
cela	PRO:DEM	cela
</NP>
<VN>
pourra	VER:futu	pouvoir
</VN>
<VN>
occasionner	VER:infi	occasionner
</VN>
<NP>
une	DET:ART	un
perte	NOM	perte
</NP>
<PP>
des	PRP:det	du
<NP>
performances	NOM	performance
</NP>
</PP>
.	SENT	.
</s>
<s>
<NP>
Le	DET:ART	le
vecteur	NOM	vecteur
</NP>
<VN>
possède	VER:pres	posséder
</VN>
<NP>
de	PRP	de
nombreux	ADJ	nombreux
avantages	NOM	avantage
</NP>
<PP>
par	PRP	par
<PP>
rapport	NOM	rapport
<PP>
à	PRP	à
<NP>
un	DET:ART	un
simple	ADJ	simple
tableau	NOM	tableau
,	PUN	,
</NP>
</PP>
</PP>
</PP>
<PP>
du	PRP:det	du
<PP>
fait	NOM	fait
<PP>
de	PRP	de
<NP>
l'	DET:ART	le
allocation	NOM	allocation
mémoire	NOM	mémoire
</NP>
</PP>
</PP>
</PP>
<VN>
dynamique	ADJ	dynamique
principalement	ADV	principalement
:	PUN	:
</VN>
<PP>
Dans	PRP	dans
<NP>
certains	PRO:IND	certain
cas	NOM	cas
,	PUN	,
</NP>
</PP>
<NP>
les	DET:ART	le
tableaux	NOM	tableau
</NP>
<VN>
sont	VER:pres	être
néanmoins	ADV	néanmoins
</VN>
<AP>
plus	ADV	plus
simples	ADJ	simple
</AP>
<VPinf>
à	PRP	à
</VPinf>
<VN>
utiliser	VER:infi	utiliser
,	PUN	,
en	PRP	en
particulier	ADJ	particulier
</VN>
<Ssub>
lorsqu'	KON	lorsque
</Ssub>
<VN>
il	PRO:PER	il
faut	VER:pres	falloir
</VN>
<VN>
créer	VER:infi	créer
</VN>
<NP>
des	PRP:det	du
matrices	NOM	matrice
</NP>
.	SENT	.
</s>
<s>
<PONCT:S>
En	PRP	en
effet	NOM	effet
,	PUN	,
</PONCT:S>
<VN>
il	PRO:PER	il
faut	VER:pres	falloir
</VN>
<VN>
créer	VER:infi	créer
</VN>
<NP>
un	DET:ART	un
vecteur	NOM	vecteur
</NP>
<PP>
de	PRP	de
<NP>
vecteurs	NOM	vecteur
</NP>
</PP>
.	SENT	.
</s>
<s>
<NP>
La	DET:ART	le
conséquence	NOM	conséquence
</NP>
<VN>
est	VER:pres	être
</VN>
<Ssub>
que	KON	que
</Ssub>
<VN>
l'	PRO:PER	la|le
on	PRO:PER	on
est	VER:pres	être
pas	ADV	pas
assuré	VER:pper	assurer
</VN>
<VPinf>
d'	PRP	de
</VPinf>
<VN>
obtenir	VER:infi	obtenir
</VN>
<NP>
la	DET:ART	le
même	ADJ	même
taille	NOM	taille
</NP>
<PP>
de	PRP	de
<NP>
colonnes	NOM	colonne
</NP>
</PP>
.	SENT	.
</s>
<s>
<VPinf>
Pour	PRP	pour
</VPinf>
<VN>
y	PRO:PER	y
remédier	VER:infi	remédier
,	PUN	,
</VN>
<VN>
il	PRO:PER	il
faut	VER:pres	falloir
</VN>
<VN>
créer	VER:infi	créer
</VN>
<NP>
des	PRP:det	du
classes	NOM	classe
</NP>
<AP>
complexes	ADJ	complexe
manuellement	ADV	manuellement
</AP>
.	SENT	.
</s>
<s>
<PONCT:S>
De	PRP	de
plus	ADV	plus
,	PUN	,
</PONCT:S>
<PP>
dans	PRP	dans
<NP>
les	DET:ART	le
langages	NOM	langage
</NP>
</PP>
<VN>
ne	ADV	ne
disposant	VER:ppre	disposer
pas	ADV	pas
</VN>
<NP>
de	PRP	de
pointeurs	NOM	pointeur
,	PUN	,
</NP>
<NP>
le	DET:ART	le
développeur	NOM	<unknown>
</NP>
<VN>
devra	VER:futu	devoir
</VN>
<VN>
se	PRO:PER	se
contenter	VER:infi	contenter
</VN>
<PP>
des	PRP:det	du
<NP>
vecteurs	NOM	vecteur
</NP>
</PP>
<VPpart>
proposés	VER:pper	proposer
</VPpart>
<PP>
par	PRP	par
<NP>
défaut	NOM	défaut
</NP>
</PP>
.	SENT	.
</s>
<s>
<PONCT:S>
Pour	PRP	pour
finir	VER:infi	finir
,	PUN	,
</PONCT:S>
<NP>
<NP>
la	DET:ART	le
taille	NOM	taille
</NP>
<COORD>
et	KON	et
</COORD>
<NP>
la	DET:ART	le
capacité	NOM	capacité
</NP>
</NP>
<PP>
d'	PRP	de
<NP>
un	DET:ART	un
vecteur	NOM	vecteur
</NP>
</PP>
<VN>
ne	ADV	ne
sont	VER:pres	être
</VN>
<AdP>
pas	ADV	pas
forcément	ADV	forcément
égaux	ADJ	égal
</AdP>
.	SENT	.
</s>
<s>
<PP>
De	PRP	de
<NP>
la	DET:ART	le
mémoire	NOM	mémoire
</NP>
</PP>
<VN>
peut	VER:pres	pouvoir
donc	ADV	donc
</VN>
<VN>
être	VER:infi	être
utilisée	VER:pper	utiliser
inutilement	ADV	inutilement
</VN>
.	SENT	.
</s>
<s>
<NP>
Le	DET:ART	le
vecteur	NOM	vecteur
</NP>
<VN>
est	VER:pres	être
surtout	ADV	surtout
utilisé	VER:pper	utiliser
</VN>
<Ssub>
lorsque	KON	lorsque
</Ssub>
<VN>
l'	PRO:PER	la|le
on	PRO:PER	on
ne	ADV	ne
connaît	VER:pres	connaître
pas	ADV	pas
à	PRP	à
l'	DET:ART	le
avance	NOM	avance
</VN>
<NP>
le	DET:ART	le
nombre	NOM	nombre
</NP>
<PP>
de	PRP	de
<NP>
données	NOM	donnée
</NP>
</PP>
<Ssub>
qu'	PRO:REL	que
</Ssub>
<VN>
il	PRO:PER	il
va	VER:pres	aller
</VN>
<VN>
devoir	VER:infi	devoir
</VN>
<VN>
contenir	VER:infi	contenir
</VN>
.	SENT	.
</s>
<s>
<VN>
Il	PRO:PER	il
est	VER:pres	être
</VN>
<AP>
aussi	ADV	aussi
utile	ADJ	utile
</AP>
<Ssub>
pour	KON	pour
</Ssub>
<VN>
ne	ADV	ne
pas	ADV	pas
redéfinir	VER:infi	redéfinir
</VN>
<PP>
de	PRP	de
<NP>
tableau	NOM	tableau
</NP>
</PP>
<VPinf>
afin	KON	afin
d'	PRP	de
</VPinf>
<VN>
être	VER:infi	être
</VN>
<NP>
réutilisé	VER:pper	réutiliser
directement	ADV	directement
</NP>
.	SENT	.
</s>
<s>
<Ssub>
Si	KON	si
</Ssub>
<VN>
l'	PRO:PER	la|le
on	PRO:PER	on
considère	VER:pres	considérer
</VN>
<NP>
l'	DET:ART	le
exemple	NOM	exemple
</NP>
<PP>
du	PRP:det	du
<NP>
tri	NOM	tri
fusion	NOM	fusion
,	PUN	,
</NP>
</PP>
<NP>
une	DET:ART	un
fonction	NOM	fonction
</NP>
<VN>
reçoit	VER:pres	recevoir
</VN>
<PP>
en	PRP	en
<NP>
argument	NOM	argument
deux	NUM	deux
tableaux	NOM	tableau
</NP>
</PP>
<PP>
de	PRP	de
<NP>
deux	NUM	deux
entiers	ADJ	entier
</NP>
</PP>
<NP>
chacun	PRO:IND	chacun
</NP>
.	SENT	.
</s>
<s>
<PP>
Avec	PRP	avec
<NP>
un	DET:ART	un
tableau	NOM	tableau
,	PUN	,
</NP>
</PP>
<NP>
la	DET:ART	le
fonction	NOM	fonction
</NP>
<VN>
devra	VER:futu	devoir
</VN>
<VN>
créer	VER:infi	créer
</VN>
<NP>
un	DET:ART	un
nouveau	ADJ	nouveau
tableau	NOM	tableau
,	PUN	,
</NP>
<Ssub>
alors	ADV	alors
qu'	KON	que
</Ssub>
<PP>
avec	PRP	avec
<NP>
deux	NUM	deux
vecteurs	NOM	vecteur
,	PUN	,
</NP>
</PP>
<VN>
il	PRO:PER	il
suffira	VER:futu	suffire
juste	ADJ	juste
</VN>
<VPinf>
de	PRP	de
</VPinf>
<VN>
recopier	VER:infi	recopier
</VN>
<NP>
les	DET:ART	le
données	NOM	donnée
</NP>
<PP>
du	PRP:det	du
<NP>
premier	NOM	premier
</NP>
</PP>
<PP>
dans	PRP	dans
<NP>
le	DET:ART	le
second	NOM	second
</NP>
</PP>
<COORD>
puis	ADV	puis
</COORD>
<VPinf>
de	PRP	de
</VPinf>
<VN>
supprimer	VER:infi	supprimer
</VN>
<NP>
le	DET:ART	le
premier	NOM	premier
</NP>
<AP>
vecteur	ADJ	vecteur
</AP>
.	SENT	.
</s>
<s>
<NP>
Une	DET:ART	un
autre	ADJ	autre
application	NOM	application
</NP>
<VN>
est	VER:pres	être
</VN>
<Ssub>
lorsque	KON	lorsque
</Ssub>
<VN>
l'	PRO:PER	la|le
on	PRO:PER	on
veut	VER:pres	vouloir
</VN>
<VN>
copier	VER:infi	copier
facilement	ADV	facilement
</VN>
<PP>
des	PRP:det	du
<NP>
données	NOM	donnée
</NP>
</PP>
<VPpart>
en	PRP	en
</VPpart>
<VN>
les	DET:ART	le
empilant	VER:ppre	empiler
</VN>
.	SENT	.
</s>
<s>
<PP>
Avec	PRP	avec
<NP>
un	DET:ART	un
tableau	NOM	tableau
</NP>
</PP>
<AP>
classique	ADJ	classique
,	PUN	,
</AP>
<VN>
il	PRO:PER	il
faut	VER:pres	falloir
</VN>
<VN>
utiliser	VER:infi	utiliser
</VN>
<NP>
un	DET:ART	un
entier	ADJ	entier
</NP>
<NP>
qui	PRO:REL	qui
</NP>
<VN>
est	VER:pres	être
</VN>
<VPpart>
incrémenté	VER:pper	incrémenter
</VPpart>
<PP>
de	PRP	de
<NP>
1	NUM	@card@
</NP>
</PP>
<PP>
à	PRP	à
<NP>
chaque	PRO:IND	chaque
ajout	NOM	ajout
</NP>
</PP>
.	SENT	.
</s>
<s>
<PONCT:S>
En	PRP	en
</PONCT:S>
<NP>
C++	ABR	<unknown>
</NP>
<NP>
cela	PRO:DEM	cela
donne	VER:pres	donner
:	PUN	:
</NP>
<VPinf>
Pour	PRP	pour
</VPinf>
<VN>
finir	VER:infi	finir
,	PUN	,
</VN>
<NP>
le	DET:ART	le
vecteur	NOM	vecteur
</NP>
<VN>
est	VER:pres	être
généralement	ADV	généralement
</VN>
<AP>
très	ADV	très
polyvalent	ADJ	polyvalent
</AP>
.	SENT	.
</s>
<s>
<VN>
Il	PRO:PER	il
est	VER:pres	être
</VN>
<AP>
capable	ADJ	capable
</AP>
<VPinf>
de	PRP	de
</VPinf>
<VN>
servir	VER:infi	servir
</VN>
<PP>
de	PRP	de
<NP>
pile	NOM	pile
,	PUN	,
de	PRP	de
liste	NOM	liste
</NP>
</PP>
<COORD>
ou	KON	ou
</COORD>
<PP>
de	PRP	de
<NP>
file	NOM	file
</NP>
</PP>
.	SENT	.
</s>
<s>
<PONCT:S>
Néanmoins	ADV	néanmoins
,	PUN	,
</PONCT:S>
<NP>
les	DET:ART	le
conteneurs	NOM	conteneur
</NP>
<AP>
spécialisés	VER:pper	spécialiser
</AP>
<VN>
sont	VER:pres	être
</VN>
<AP>
plus	ADV	plus
optimisés	VER:pper	optimiser
</AP>
<PP>
pour	PRP	pour
<NP>
ces	PRO:DEM	ce
tâches	NOM	tâche
</NP>
</PP>
.	SENT	.
</s>
<s>
<NP>
Un	DET:ART	un
vecteur	NOM	vecteur
</NP>
<VN>
peut	VER:pres	pouvoir
généralement	ADV	généralement
</VN>
<VN>
recevoir	VER:infi	recevoir
</VN>
<NP>
les	DET:ART	le
instructions	NOM	instruction
</NP>
<AP>
suivantes	ADJ	suivant
:	PUN	:
</AP>
<VN>
Ils	PRO:PER	il
peuvent	VER:pres	pouvoir
aussi	ADV	aussi
</VN>
<VN>
retourner	VER:infi	retourner
</VN>
<NP>
des	PRP:det	du
adresses	NOM	adresse
</NP>
<COORD>
ou	KON	ou
</COORD>
<PP>
des	PRP:det	du
<NP>
indices	NOM	indice
:	PUN	:
</NP>
</PP>
<NP>
De	PRP	de
plus	ADV	plus
,	PUN	,
</NP>
<NP>
certaines	PRO:IND	certain
implémentations	NOM	<unknown>
</NP>
<VN>
supportent	VER:pres	supporter
</VN>
<NP>
d'	PRP	de
autres	ADJ	autre
fonctions	NOM	fonction
</NP>
<VPinf>
pour	PRP	pour
</VPinf>
<VN>
trier	VER:infi	trier
</VN>
<NP>
le	DET:ART	le
vecteur	NOM	vecteur
</NP>
<COORD>
ou	KON	ou
</COORD>
<VN>
le	PRO:PER	le
formater	VER:infi	formater
par	PRP	par
exemple	NOM	exemple
</VN>
.	SENT	.
</s>
<s>
<VN>
Il	PRO:PER	il
existe	VER:pres	exister
aussi	ADV	aussi
</VN>
<NP>
des	PRP:det	du
instructions	NOM	instruction
</NP>
<AP>
conditionnelles	ADJ	conditionnel
</AP>
<NP>
qui	PRO:REL	qui
</NP>
<VN>
permettent	VER:pres	permettre
</VN>
<VPinf>
de	PRP	de
</VPinf>
<VN>
raccourcir	VER:infi	raccourcir
</VN>
<NP>
le	DET:ART	le
code	NOM	code
</NP>
<VPpart>
en	PRP	en
</VPpart>
<VN>
enlevant	VER:ppre	enlever
</VN>
<NP>
une	DET:ART	un
instruction	NOM	instruction
</NP>
<AP>
codice_8(l'instruction	NOM	<unknown>
codice_9	ADJ	<unknown>
</AP>
<PP>
avec	PRP	avec
<NP>
le	DET:ART	le
codice_1	NOM	<unknown>
</NP>
</PP>
<PP>
en	PRP	en
<NP>
C++	NAM	<unknown>
,	PUN	,
</NP>
</PP>
<VN>
remplace	VER:pres	remplacer
</VN>
<NP>
un	DET:ART	un
élément	NOM	élément
</NP>
<Ssub>
si	KON	si
</Ssub>
<NP>
un	DET:ART	un
prédicat	NOM	prédicat
</NP>
<VN>
est	VER:pres	être
</VN>
<VPpart>
vérifié	VER:pper	vérifier
)	PUN	)
</VPpart>
.	SENT	.
</s>
<s>
<VN>
Il	PRO:PER	il
est	VER:pres	être
</VN>
<AP>
facile	ADJ	facile
</AP>
<VPinf>
de	PRP	de
</VPinf>
<VN>
créer	VER:infi	créer
</VN>
<NP>
son	DET:POS	son
propre	ADJ	propre
vecteur	NOM	vecteur
</NP>
<PP>
avec	PRP	avec
<NP>
des	PRP:det	du
pointeurs	NOM	pointeur
</NP>
</PP>
.	SENT	.
</s>
<s>
<PONCT:S>
Voici	ADV	voici
</PONCT:S>
<NP>
un	DET:ART	un
exemple	NOM	exemple
</NP>
<PP>
en	PRP	en
<NP>
C++	NAM	<unknown>
</NP>
</PP>
<NP>
où	PRO:REL	où
</NP>
<NP>
le	DET:ART	le
vecteur	ADJ	vecteur
manipule	NOM	manipule
</NP>
<PP>
des	PRP:det	du
<NP>
entiers	ADJ	entier
</NP>
</PP>
.	SENT	.
</s>
<s>
<NP>
La	DET:ART	le
classe	NOM	classe
</NP>
<AP>
vecteur	ADJ	vecteur
non	ADV	non
</AP>
<VPpart>
présentée	VER:pper	présenter
ici	ADV	ici
</VPpart>
<PP>
en	PRP	en
<NP>
intégralité	NOM	intégralité
</NP>
</PP>
<VN>
est	VER:pres	être
constituée	VER:pper	constituer
</VN>
<PP>
de	PRP	de
<NP>
deux	NUM	deux
champs	NOM	champ
:	PUN	:
</NP>
</PP>
<NP>
un	DET:ART	un
pointeur	NOM	pointeur
</NP>
<AP>
codice_11	ADJ	<unknown>
</AP>
<PP>
sur	PRP	sur
<NP>
des	PRP:det	du
entiers	ADJ	entier
,	PUN	,
</NP>
</PP>
<NP>
qui	PRO:REL	qui
</NP>
<VN>
pointe	VER:pres	pointer
</VN>
<PP>
sur	PRP	sur
<PP>
le	DET:ART	le
<PP>
début	NOM	début
<PP>
du	PRP:det	du
<NP>
bloc	NOM	bloc
de	PRP	de
mémoire	NOM	mémoire
</NP>
</PP>
</PP>
</PP>
</PP>
<NP>
qui	PRO:REL	qui
</NP>
<VN>
a	VER:pres	avoir
été	VER:pper	être
alloué	VER:pper	allouer
,	PUN	,
</VN>
<COORD>
et	KON	et
</COORD>
<NP>
un	DET:ART	un
entier	ADJ	entier
codice_12	NOM	<unknown>
</NP>
<NP>
qui	PRO:REL	qui
</NP>
<VN>
enregistre	VER:pres	enregistrer
</VN>
<NP>
le	DET:ART	le
nombre	NOM	nombre
</NP>
<PP>
de	PRP	de
<NP>
données	NOM	donnée
</NP>
</PP>
<VPpart>
contenues	VER:pper	contenir
</VPpart>
<PP>
dans	PRP	dans
<NP>
le	DET:ART	le
vecteur	NOM	vecteur
</NP>
</PP>
.	SENT	.
</s>
<s>
<PONCT:S>
Dans	PRP	dans
cet	PRO:DEM	ce
exemple	NOM	exemple
,	PUN	,
</PONCT:S>
<NP>
la	DET:ART	le
mémoire	NOM	mémoire
</NP>
<VN>
est	VER:pres	être
</VN>
<VPpart>
allouée	VER:pper	allouer
de	PRP	de
nouveau	ADJ	nouveau
</VPpart>
<PP>
à	PRP	à
<NP>
<NP>
chaque	PRO:IND	chaque
suppression	NOM	suppression
</NP>
<COORD>
ou	KON	ou
</COORD>
<NP>
ajout	NOM	ajout
</NP>
</NP>
</PP>
.	SENT	.
</s>
<s>
<NP>
Seules	NOM	seul
</NP>
<NP>
les	DET:ART	le
méthodes	NOM	méthode
</NP>
<PP>
de	PRP	de
<NP>
cette	PRO:DEM	ce
classe	NOM	classe
</NP>
</PP>
<VN>
vont	VER:pres	aller
</VN>
<VN>
être	VER:infi	être
</VN>
<AP>
exposées	VER:pper	exposer
</AP>
.	SENT	.
</s>
<s>
<VN>
Il	PRO:PER	il
n'	ADV	ne
est	VER:pres	être
pas	ADV	pas
</VN>
<AP>
obligatoire	ADJ	obligatoire
</AP>
<VPinf>
de	PRP	de
</VPinf>
<VN>
créer	VER:infi	créer
</VN>
<NP>
une	DET:ART	un
classe	NOM	classe
</NP>
<VPinf>
pour	PRP	pour
</VPinf>
<VN>
créer	VER:infi	créer
</VN>
<NP>
son	DET:POS	son
propre	ADJ	propre
vecteur	NOM	vecteur
</NP>
.	SENT	.
</s>
<s>
<VN>
Il	PRO:PER	il
est	VER:pres	être
</VN>
<PP>
par	PRP	par
<NP>
contre	PRP	contre
nécessaire	ADJ	nécessaire
</NP>
</PP>
<VPinf>
d'	PRP	de
</VPinf>
<VN>
avoir	VER:infi	avoir
</VN>
<NP>
accès	NOM	accès
</NP>
<PP>
à	PRP	à
<NP>
des	PRP:det	du
pointeurs	NOM	pointeur
</NP>
</PP>
<COORD>
ou	KON	ou
</COORD>
<PP>
des	PRP:det	du
<NP>
références	NOM	référence
</NP>
</PP>
.	SENT	.
</s>
<s>
<NP>
D'	PRP	de
autres	ADJ	autre
langages	NOM	langage
,	PUN	,
</NP>
<PP>
comme	KON	comme
<NP>
<NP>
le	DET:ART	le
C	NUM	C
</NP>
<COORD>
ou	KON	ou
</COORD>
<NP>
le	DET:ART	le
Pascal	NAM	Pascal
</NP>
</NP>
</PP>
<VN>
peuvent	VER:pres	pouvoir
donc	ADV	donc
</VN>
<VN>
convenir	VER:infi	convenir
</VN>
.	SENT	.
</s>
<s>
<NP>
Le	DET:ART	le
constructeur	NOM	constructeur
</NP>
<NP>
qui	PRO:REL	qui
</NP>
<VN>
est	VER:pres	être
exécuté	VER:pper	exécuter
</VN>
<Ssub>
quand	KON	quand
</Ssub>
<NP>
le	DET:ART	le
vecteur	NOM	vecteur
</NP>
<VN>
sera	VER:futu	être
</VN>
<VPpart>
créé	VER:pper	créer
</VPpart>
<VN>
initialise	VER:pres	initialiser
</VN>
<NP>
le	DET:ART	le
pointeur	NOM	pointeur
</NP>
<PP>
sur	PRP	sur
<NP>
une	DET:ART	un
adresse	NOM	adresse
,	PUN	,
</NP>
</PP>
<COORD>
et	KON	et
</COORD>
<VN>
met	VER:pres	mettre
</VN>
<NP>
le	DET:ART	le
nombre	NOM	nombre
</NP>
<PP>
de	PRP	de
<NP>
données	NOM	donnée
</NP>
</PP>
<PP>
à	PRP	à
<NP>
0	NUM	@card@
</NP>
</PP>
.	SENT	.
</s>
<s>
<NP>
Le	DET:ART	le
destructeur	NOM	destructeur
</NP>
<NP>
qui	PRO:REL	qui
</NP>
<VN>
est	VER:pres	être
exécuté	VER:pper	exécuter
</VN>
<Ssub>
quand	KON	quand
</Ssub>
<NP>
le	DET:ART	le
vecteur	NOM	vecteur
</NP>
<VN>
est	VER:pres	être
</VN>
<VPpart>
détruit	VER:pper	détruire
</VPpart>
<VN>
libère	VER:pres	libérer
</VN>
<NP>
le	DET:ART	le
bloc	NOM	bloc
mémoire	NOM	mémoire
</NP>
<NP>
qui	PRO:REL	qui
</NP>
<VN>
est	VER:pres	être
</VN>
<VPpart>
alloué	VER:pper	allouer
</VPpart>
<PP>
au	PRP:det	au
<NP>
vecteur	NOM	vecteur
</NP>
</PP>
<VPinf>
pour	PRP	pour
</VPinf>
<VN>
éviter	VER:infi	éviter
</VN>
<NP>
des	PRP:det	du
fuites	NOM	fuite
</NP>
<PP>
de	PRP	de
<NP>
mémoire	NOM	mémoire
</NP>
</PP>
.	SENT	.
</s>
<s>
<NP>
Le	DET:ART	le
constructeur	NOM	constructeur
</NP>
<VN>
alloue	VER:pres	allouer
seulement	ADV	seulement
</VN>
<NP>
un	DET:ART	un
octet	NOM	octet
</NP>
<PP>
de	PRP	de
<NP>
mémoire	NOM	mémoire
</NP>
</PP>
<VPinf>
afin	KON	afin
d'	PRP	de
</VPinf>
<VN>
avoir	VER:infi	avoir
</VN>
<NP>
un	DET:ART	un
bloc	NOM	bloc
mémoire	NOM	mémoire
</NP>
<PP>
de	PRP	de
<NP>
référence	NOM	référence
</NP>
</PP>
<Ssub>
que	KON	que
</Ssub>
<NP>
le	DET:ART	le
pointeur	NOM	pointeur
p	NOM	<unknown>
</NP>
<VN>
peut	VER:pres	pouvoir
</VN>
<VN>
adresser	VER:infi	adresser
</VN>
.	SENT	.
</s>
<s>
<NP>
Ce	PRO:DEM	ce
bloc	NOM	bloc
</NP>
<VN>
pourra	VER:futu	pouvoir
ensuite	ADV	ensuite
</VN>
<VN>
être	VER:infi	être
</VN>
<AP>
agrandi	VER:pper	agrandir
</AP>
<PP>
avec	PRP	avec
<NP>
la	DET:ART	le
méthode	NOM	méthode
«	PUN:cit	«
</NP>
</PP>
<VPpart>
réallouer	VER:pper	<unknown>
»	PUN:cit	»
</VPpart>
<VPinf>
pour	PRP	pour
</VPinf>
<VN>
contenir	VER:infi	contenir
</VN>
<NP>
plus	ADV	plus
de	PRP	de
nombres	NOM	nombre
</NP>
.	SENT	.
</s>
<s>
<VN>
Il	PRO:PER	il
faut	VER:pres	falloir
également	ADV	également
</VN>
<VN>
ajouter	VER:infi	ajouter
</VN>
<NP>
une	DET:ART	un
ligne	NOM	ligne
</NP>
<VPinf>
afin	KON	afin
d'	PRP	de
</VPinf>
<VN>
utiliser	VER:infi	utiliser
"	PUN:cit	"
</VN>
<NP>
stdlib.h	NOM	<unknown>
"	PUN:cit	"
,	PUN	,
</NP>
<NP>
qui	PRO:REL	qui
</NP>
<VN>
donne	VER:pres	donner
</VN>
<NP>
accès	NOM	accès
</NP>
<PP>
à	PRP	à
<NP>
codice_13	NOM	<unknown>
,	PUN	,
</NP>
</PP>
<NP>
<NP>
codice_14	NOM	<unknown>
,	PUN	,
</NP>
<COORD>
et	KON	et
</COORD>
<NP>
codice_15(non	NOM	<unknown>
</NP>
</NP>
<VN>
présente	VER:pres	présenter
ici	ADV	ici
)	PUN	)
</VN>
.	SENT	.
</s>
<s>
<NP>
La	DET:ART	le
méthode	NOM	méthode
«	PUN:cit	«
</NP>
<VPpart>
réallouer	VER:pper	<unknown>
»	PUN:cit	»
</VPpart>
<VN>
se	PRO:PER	se
charge	VER:pres	charger
</VN>
<VPinf>
d'	PRP	de
</VPinf>
<VN>
allouer	VER:infi	allouer
</VN>
<NP>
le	DET:ART	le
nombre	NOM	nombre
</NP>
<PP>
d'	PRP	de
<NP>
octets	NOM	octet
</NP>
</PP>
<AP>
nécessaires	ADJ	nécessaire
</AP>
<PP>
au	PRP:det	au
<NP>
vecteur	NOM	vecteur
</NP>
</PP>
<VPinf>
pour	PRP	pour
</VPinf>
<VN>
contenir	VER:infi	contenir
</VN>
<NP>
ses	DET:POS	son
données	NOM	donnée
</NP>
<PP>
avec	PRP	avec
<NP>
la	DET:ART	le
fonction	NOM	fonction
</NP>
</PP>
<AP>
codice_13	ADJ	<unknown>
</AP>
<NP>
qui	PRO:REL	qui
</NP>
<VN>
agrandit	VER:pres	agrandir
</VN>
<COORD>
ou	KON	ou
</COORD>
<VN>
réduit	VER:pper	réduire
</VN>
<NP>
le	DET:ART	le
bloc	NOM	bloc
mémoire	NOM	mémoire
</NP>
<VPpart>
alloué	VER:pper	allouer
</VPpart>
.	SENT	.
</s>
<s>
<NP>
La	DET:ART	le
taille	NOM	taille
</NP>
<PP>
d'	PRP	de
<NP>
un	DET:ART	un
entier	ADJ	entier
étant	NOM	étant
</NP>
</PP>
<AP>
fixe	ADJ	fixe
,	PUN	,
</AP>
<VN>
il	PRO:PER	il
est	VER:pres	être
</VN>
<AP>
possible	ADJ	possible
</AP>
<VPinf>
de	PRP	de
</VPinf>
<VN>
déclarer	VER:infi	déclarer
</VN>
<NP>
une	DET:ART	un
constante	ADJ	constant
</NP>
<AP>
codice_17	NOM	<unknown>
</AP>
<VPinf>
pour	KON	pour
</VPinf>
<VN>
ne	ADV	ne
pas	ADV	pas
avoir	VER:infi	avoir
</VN>
<VPinf>
à	PRP	à
</VPinf>
<VN>
écrire	VER:infi	écrire
</VN>
<NP>
codice_18	NOM	<unknown>
</NP>
.	SENT	.
</s>
<s>
<NP>
La	DET:ART	le
méthode	NOM	méthode
</NP>
<AP>
«	PUN:cit	«
</AP>
<VN>
ajouter	VER:infi	ajouter
»	PUN:cit	»
</VN>
<VN>
peut	VER:pres	pouvoir
</VN>
<VN>
empiler	VER:infi	empiler
</VN>
<NP>
un	DET:ART	un
entier	ADJ	entier
</NP>
<AdP>
très	ADV	très
simplement	ADV	simplement
:	PUN	:
</AdP>
<VN>
il	PRO:PER	il
suffit	VER:pres	suffire
</VN>
<VPinf>
d'	PRP	de
</VPinf>
<VN>
augmenter	VER:infi	augmenter
</VN>
<NP>
le	DET:ART	le
nombre	NOM	nombre
</NP>
<PP>
de	PRP	de
<NP>
données	NOM	donnée
,	PUN	,
</NP>
</PP>
<NP>
ce	PRO:DEM	ce
</NP>
<NP>
qui	PRO:REL	qui
</NP>
<VN>
va	VER:pres	aller
</VN>
<VN>
agrandir	VER:infi	agrandir
</VN>
<NP>
le	DET:ART	le
vecteur	NOM	vecteur
</NP>
.	SENT	.
</s>
<s>
<VN>
Il	PRO:PER	il
suffit	VER:pres	suffire
ensuite	ADV	ensuite
</VN>
<VPinf>
d'	PRP	de
</VPinf>
<VN>
écrire	VER:infi	écrire
</VN>
<PP>
à	PRP	à
<NP>
ce	PRO:DEM	ce
nouvel	ADJ	nouveau
emplacement	NOM	emplacement
</NP>
</PP>
.	SENT	.
</s>
<s>
<NP>
Une	DET:ART	un
autre	ADJ	autre
méthode	NOM	méthode
</NP>
<AP>
similaire	ADJ	similaire
</AP>
<VN>
peut	VER:pres	pouvoir
</VN>
<VN>
dépiler	VER:infi	dépiler
</VN>
<NP>
un	DET:ART	un
entier	ADJ	entier
,	PUN	,
</NP>
<VPpart>
en	PRP	en
</VPpart>
<VN>
réduisant	VER:ppre	réduire
</VN>
<NP>
le	DET:ART	le
nombre	NOM	nombre
d'	PRP	de
octets	NOM	octet
</NP>
<NP>
qui	PRO:REL	qui
</NP>
<VN>
seront	VER:futu	être
</VN>
<VPpart>
réalloués	VER:pper	<unknown>
,	PUN	,
</VPpart>
<NP>
ce	PRO:DEM	ce
</NP>
<NP>
qui	PRO:REL	qui
</NP>
<VN>
permet	VER:pres	permettre
</VN>
<VPinf>
de	PRP	de
</VPinf>
<VN>
libérer	VER:infi	libérer
(	PUN	(
</VN>
<VN>
détruire	VER:infi	détruire
)	PUN	)
</VN>
<NP>
le	DET:ART	le
dernier	ADJ	dernier
élément	NOM	élément
</NP>
<PP>
du	PRP:det	du
<NP>
vecteur	NOM	vecteur
</NP>
</PP>
.	SENT	.
</s>
<s>
<VPinf>
Pour	PRP	pour
</VPinf>
<VN>
lire	VER:infi	lire
</VN>
<COORD>
et	KON	et
</COORD>
<VN>
modifier	VER:infi	modifier
</VN>
<NP>
une	DET:ART	un
valeur	NOM	valeur
</NP>
<PP>
à	PRP	à
<PP>
partir	VER:infi	partir
<PP>
d'	PRP	de
<NP>
un	DET:ART	un
index	NOM	index
,	PUN	,
</NP>
</PP>
</PP>
</PP>
<VN>
il	PRO:PER	il
suffit	VER:pres	suffire
</VN>
<VPinf>
d'	PRP	de
</VPinf>
<VN>
utiliser	VER:infi	utiliser
</VN>
<NP>
la	DET:ART	le
syntaxe	NOM	syntaxe
</NP>
<AP>
classique	ADJ	classique
</AP>
<PP>
des	PRP:det	du
<NP>
pointeurs	NOM	pointeur
</NP>
</PP>
.	SENT	.
</s>
<s>
<PONCT:S>
Dans	PRP	dans
cet	PRO:DEM	ce
exemple	NOM	exemple
</PONCT:S>
<NP>
l'	DET:ART	le
index	NOM	index
</NP>
<VN>
doit	VER:pres	devoir
</VN>
<VN>
être	VER:infi	être
</VN>
<AP>
compris	VER:pper	comprendre
</AP>
<PP>
entre	PRP	entre
<NP>
<NP>
0	NUM	@card@
</NP>
<COORD>
et	KON	et
</COORD>
<NP>
le	DET:ART	le
nombre	NOM	nombre
</NP>
</NP>
</PP>
<PP>
de	PRP	de
<NP>
données	NOM	donnée
</NP>
</PP>
<NP>
moins	ADV	moins
un	NOM	un
(	PUN	(
</NP>
<PP>
comme	ADV	comme
<PP>
dans	PRP	dans
<NP>
un	DET:ART	un
tableau	NOM	tableau
</NP>
</PP>
</PP>
<AP>
classique	ADJ	classique
</AP>
<PP>
en	PRP	en
<NP>
C++	NAM	<unknown>
)	PUN	)
</NP>
</PP>
.	SENT	.
</s>
<s>
<VPinf>
Pour	PRP	pour
</VPinf>
<VN>
éviter	VER:infi	éviter
</VN>
<NP>
les	DET:ART	le
erreurs	NOM	erreur
</NP>
<PP>
de	PRP	de
<NP>
dépassement	NOM	dépassement
,	PUN	,
</NP>
</PP>
<NP>
une	DET:ART	un
fonction	NOM	fonction
</NP>
<AP>
codice_19	ADJ	<unknown>
</AP>
<VN>
vérifie	VER:pres	vérifier
</VN>
<Ssub>
que	KON	que
</Ssub>
<NP>
l'	DET:ART	le
index	NOM	index
</NP>
<VN>
est	VER:pres	être
</VN>
<NP>
de	PRP	de
bonne	ADJ	bon
taille	NOM	taille
</NP>
.	SENT	.
</s>
<s>
<VN>
Il	PRO:PER	il
est	VER:pres	être
</VN>
<AP>
possible	ADJ	possible
</AP>
<VPinf>
de	PRP	de
</VPinf>
<VN>
créer	VER:infi	créer
</VN>
<NP>
les	DET:ART	le
méthodes	NOM	méthode
</NP>
<AP>
codice_20	ADJ	<unknown>
</AP>
<COORD>
et	KON	et
</COORD>
<AP>
codice_21	ADJ	<unknown>
</AP>
<NP>
qui	PRO:REL	qui
</NP>
<VN>
retournent	VER:pres	retourner
</VN>
<NP>
l'	DET:ART	le
index	NOM	index
</NP>
<PP>
du	PRP:det	du
<NP>
premier	NUM	premier
</NP>
</PP>
<COORD>
et	KON	et
</COORD>
<PP>
de	PRP	de
<NP>
l'	DET:ART	le
élément	NOM	élément
</NP>
</PP>
<PP>
suivant	VER:ppre	suivre
<NP>
le	DET:ART	le
dernier	ADJ	dernier
</NP>
</PP>
<VPinf>
afin	KON	afin
de	PRP	de
</VPinf>
<VN>
créer	VER:infi	créer
</VN>
<NP>
des	PRP:det	du
boucles	NOM	boucle
</NP>
<VN>
codice_22	ADJ	<unknown>
facilement	ADV	facilement
</VN>
<VPinf>
pour	PRP	pour
</VPinf>
<VN>
afficher	VER:infi	afficher
</VN>
<NP>
le	DET:ART	le
vecteur	NOM	vecteur
</NP>
.	SENT	.
</s>
<s>
<NP>
La	DET:ART	le
fonction	NOM	fonction
</NP>
<AP>
codice_21	ADJ	<unknown>
</AP>
<VN>
peut	VER:pres	pouvoir
</VN>
<VN>
être	VER:infi	être
utilisée	VER:pper	utiliser
</VN>
<VPinf>
pour	PRP	pour
</VPinf>
<VN>
connaître	VER:infi	connaître
</VN>
<NP>
la	DET:ART	le
taille	NOM	taille
</NP>
<PP>
du	PRP:det	du
<NP>
vecteur	NOM	vecteur
</NP>
</PP>
.	SENT	.
</s>
<s>
<PONCT:S>
En	PRP	en
</PONCT:S>
<NP>
<NP>
général	ADJ	général
les	DET:ART	le
termes	NOM	terme
"	PUN:cit	"
begin	NOM	<unknown>
"	PUN:cit	"
</NP>
<COORD>
et	KON	et
"	PUN:cit	"
</COORD>
<NP>
end	NOM	<unknown>
"	PUN:cit	"
</NP>
</NP>
<VN>
sont	VER:pres	être
plus	ADV	plus
utilisés	VER:pper	utiliser
</VN>
.	SENT	.
</s>
<s>
<VN>
Il	PRO:PER	il
existe	VER:pres	exister
</VN>
<NP>
des	PRP:det	du
variantes	NOM	variante
</NP>
<VPinf>
pour	PRP	pour
</VPinf>
<VN>
obtenir	VER:infi	obtenir
</VN>
<NP>
le	DET:ART	le
dernier	ADJ	dernier
élément	NOM	élément
</NP>
<VPinf>
afin	KON	afin
de	PRP	de
</VPinf>
<VN>
créer	VER:infi	créer
</VN>
<NP>
des	PRP:det	du
boucles	NOM	boucle
</NP>
<PP>
dans	PRP	dans
<NP>
le	DET:ART	le
sens	NOM	sen|sens
</NP>
</PP>
<AP>
inverse	ADJ	inverse
</AP>
.	SENT	.
</s>
<s>
<NP>
Cette	PRO:DEM	ce
méthode	NOM	méthode
</NP>
<VN>
est	VER:pres	être
</VN>
<AP>
simple	ADJ	simple
</AP>
<VPinf>
à	PRP	à
</VPinf>
<VN>
mettre	VER:infi	mettre
en	PRP	en
œuvre	NOM	<unknown>
;	PUN	;
</VN>
<VN>
elle	PRO:PER	elle
est	VER:pres	être
</VN>
<AP>
souvent	ADV	souvent
appelée	ADJ	appelé
"	PUN:cit	"
swap	NOM	swap
"	PUN:cit	"
</AP>
<PP>
en	PRP	en
<NP>
anglais	ADJ	anglais
</NP>
</PP>
.	SENT	.
</s>
<s>
<VPinf>
Pour	PRP	pour
</VPinf>
<VN>
ne	ADV	ne
pas	ADV	pas
perdre	VER:infi	perdre
</VN>
<PP>
de	PRP	de
<NP>
donnés	NOM	donné
,	PUN	,
</NP>
</PP>
<NP>
une	DET:ART	un
variable	ADJ	variable
tampon	NOM	tampon
(	PUN	(
</NP>
<VPpart>
appelée	VER:pper	appeler
</VPpart>
<NP>
"	PUN:cit	"
c	NOM	<unknown>
"	PUN:cit	"
</NP>
<PP>
dans	PRP	dans
<NP>
ce	PRO:DEM	ce
cas	NOM	cas
)	PUN	)
</NP>
</PP>
<VN>
est	VER:pres	être
</VN>
<AP>
nécessaire	ADJ	nécessaire
</AP>
.	SENT	.
</s>
