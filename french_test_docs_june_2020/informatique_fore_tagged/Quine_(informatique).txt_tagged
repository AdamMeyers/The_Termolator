<s>
<PONCT:S>
Quine	ADV	quine
(	PUN	(
</PONCT:S>
<NP>
informatique	ADJ	informatique
)	PUN	)
</NP>
<NP>
<NP>
Un	DET:ART	un
quine	NOM	quine
(	PUN	(
</NP>
<COORD>
ou	KON	ou
</COORD>
<NP>
programme	NOM	programme
autoreproducteur	ADJ	autoreproducteur
,	PUN	,
"	PUN:cit	"
</NP>
</NP>
<NP>
self-reproducing	NOM	<unknown>
"	PUN:cit	"
</NP>
<PP>
en	PRP	en
<NP>
anglais	ADJ	anglais
)	PUN	)
</NP>
</PP>
<VN>
est	VER:pres	être
</VN>
<NP>
un	DET:ART	un
programme	NOM	programme
</NP>
<AP>
informatique	ADJ	informatique
(	PUN	(
</AP>
<AP>
non	ADV	non
vide	ADJ	vide
)	PUN	)
</AP>
<NP>
qui	PRO:REL	qui
</NP>
<VN>
imprime	VER:pres	imprimer
</VN>
<NP>
son	DET:POS	son
propre	ADJ	propre
code	NOM	code
source	NOM	source
</NP>
.	SENT	.
</s>
<s>
<NP>
L'	DET:ART	le
opération	NOM	opération
</NP>
<NP>
qui	PRO:REL	qui
</NP>
<VN>
consiste	VER:pres	consister
</VN>
<VPinf>
à	PRP	à
</VPinf>
<VN>
ouvrir	VER:infi	ouvrir
</VN>
<NP>
le	DET:ART	le
fichier	NOM	fichier
source	NOM	source
</NP>
<COORD>
et	KON	et
</COORD>
<VPinf>
à	PRP	à
</VPinf>
<VN>
l'	PRO:PER	la|le
afficher	VER:infi	afficher
est	VER:pres	être
considérée	VER:pper	considérer
</VN>
<PP>
comme	ADV	comme
<NP>
une	DET:ART	un
tricherie	NOM	tricherie
</NP>
</PP>
.	SENT	.
</s>
<s>
<AdP>
Plus	ADV	plus
généralement	ADV	généralement
,	PUN	,
</AdP>
<NP>
un	DET:ART	un
programme	NOM	programme
</NP>
<NP>
qui	PRO:REL	qui
</NP>
<VN>
utilise	VER:pres	utiliser
</VN>
<NP>
une	DET:ART	un
quelconque	ADJ	quelconque
entrée	NOM	entrée
</NP>
<PP>
de	PRP	de
<NP>
données	NOM	donnée
</NP>
</PP>
<VN>
ne	ADV	ne
peut	VER:pres	pouvoir
</VN>
<VN>
être	VER:infi	être
considéré	VER:pper	considérer
</VN>
<PP>
comme	ADV	comme
<NP>
un	DET:ART	un
</NP>
</PP>
<AP>
quine	ADV	quine
valide	ADJ	valide
</AP>
.	SENT	.
</s>
<s>
<PP>
Dans	PRP	dans
<NP>
beaucoup	ADV	beaucoup
de	PRP	de
langages	NOM	langage
</NP>
</PP>
<PP>
de	PRP	de
<NP>
programmation	NOM	programmation
,	PUN	,
</NP>
</PP>
<NP>
un	DET:ART	un
quine	NOM	quine
</NP>
<VN>
est	VER:pres	être
</VN>
<NP>
une	DET:ART	un
variante	NOM	variante
</NP>
<PP>
de	PRP	de
<NP>
la	DET:ART	le
commande	NOM	commande
</NP>
</PP>
<AP>
suivante	ADJ	suivant
:	PUN	:
</AP>
<PP>
À	PRP	à
<PP>
titre	NOM	titre
<PP>
de	PRP	de
<NP>
défi	NOM	défi
</NP>
</PP>
</PP>
</PP>
<COORD>
ou	KON	ou
</COORD>
<PP>
d'	PRP	de
<NP>
amusement	NOM	amusement
,	PUN	,
</NP>
</PP>
<NP>
certains	PRO:IND	certain
programmeurs	NOM	programmeur
</NP>
<VN>
essaient	VER:pres	essayer
</VN>
<VPinf>
d'	PRP	de
</VPinf>
<VN>
écrire	VER:infi	écrire
</VN>
<AdP>
le	DET:ART	le
plus	ADV	plus
court	ADV	court
quine	ADV	quine
</AdP>
<PP>
dans	PRP	dans
<NP>
un	DET:ART	un
langage	NOM	langage
</NP>
</PP>
<PP>
de	PRP	de
<NP>
programmation	NOM	programmation
</NP>
</PP>
<VPpart>
donné	VER:pper	donner
</VPpart>
.	SENT	.
</s>
<s>
<NP>
Donald	NAM	Donald
Knuth	NAM	<unknown>
(	PUN	(
</NP>
<NP>
Prix	NOM	prix
Turing	NAM	<unknown>
</NP>
<NP>
<NP>
1974	NUM	@card@
)	PUN	)
</NP>
<COORD>
et	KON	et
</COORD>
<NP>
Ken	NAM	<unknown>
Thompson	NAM	<unknown>
(	PUN	(
</NP>
</NP>
<NP>
prix	NOM	prix
Turing	NAM	<unknown>
1983	NUM	@card@
)	PUN	)
</NP>
<VN>
expliquent	VER:pres	expliquer
</VN>
<PP>
dans	PRP	dans
<NP>
leurs	DET:POS	leur
conférences	NOM	conférence
Turing	NAM	<unknown>
</NP>
</PP>
<NP>
le	DET:ART	le
rôle	NOM	rôle
</NP>
<Srel>
que	PRO:REL	que
</Srel>
<NP>
ces	PRO:DEM	ce
programmes	NOM	programme
</NP>
<AP>
autoreproducteurs	ADJ	autoreproducteur
</AP>
<AP>
minimaux	ADJ	minimal
</AP>
<VN>
ont	VER:pres	avoir
joué	VER:pper	jouer
</VN>
<PP>
dans	PRP	dans
<NP>
<NP>
leurs	DET:POS	leur
formations	NOM	formation
</NP>
<COORD>
et	KON	et
</COORD>
<NP>
le	DET:ART	le
pourquoi	NOM	pourquoi
</NP>
</NP>
</PP>
<PP>
de	PRP	de
<NP>
ce	PRO:DEM	ce
rôle	NOM	rôle
</NP>
</PP>
.	SENT	.
</s>
<s>
<NP>
Les	DET:ART	le
quines	NOM	quine
</NP>
<VN>
tirent	VER:pres	tirer
</VN>
<NP>
leur	DET:POS	leur
nom	NOM	nom
</NP>
<PP>
du	PRP:det	du
<NP>
<NP>
philosophe	ADJ	philosophe
</NP>
<COORD>
et	KON	et
</COORD>
<NP>
logicien	ADJ	logicien
américain	NOM	américain
W.	ABR	<unknown>
V.	ABR	<unknown>
Quine	ADV	quine
(	PUN	(
</NP>
</NP>
</PP>
<NP>
1908	NUM	@card@
–	ABR	<unknown>
2000	NUM	@card@
)	PUN	)
,	PUN	,
</NP>
<NP>
qui	PRO:REL	qui
</NP>
<VN>
a	VER:pres	avoir
étudié	VER:pper	étudier
en	PRP	en
profondeur	NOM	profondeur
</VN>
<NP>
l'	DET:ART	le
autoréférence	NOM	<unknown>
</NP>
<AP>
indirecte	ADJ	indirect
:	PUN	:
</AP>
<VN>
il	PRO:PER	il
a	VER:pres	avoir
entre	PRP	entre
autres	ADJ	autre
forgé	VER:pper	forger
</VN>
<NP>
l'	DET:ART	le
expression	NOM	expression
</NP>
<AP>
paradoxale	ADJ	paradoxal
:	PUN	:
c'est-à-dire	ADV	c'est-à-dire
:	PUN	:
«	PUN:cit	«
</AP>
<Sint>
'	PUN	'
</Sint>
<VN>
est	VER:pres	être
</VN>
<NP>
faux	ADJ	faux
</NP>
<Ssub>
lorsque	KON	lorsque
</Ssub>
<VPpart>
précédé	VER:pper	précéder
</VPpart>
<PP>
par	PRP	par
<NP>
son	DET:POS	son
propre	ADJ	propre
énoncé	NOM	énoncé
</NP>
</PP>
<Sint>
'	PUN	'
</Sint>
<VN>
est	VER:pres	être
</VN>
<NP>
faux	ADJ	faux
</NP>
<Ssub>
lorsque	KON	lorsque
</Ssub>
<VPpart>
précédé	VER:pper	précéder
</VPpart>
<PP>
par	PRP	par
<NP>
son	DET:POS	son
propre	ADJ	propre
énoncé	NOM	énoncé
»	PUN:cit	»
</NP>
</PP>
.	SENT	.
</s>
<s>
<PP>
Dans	PRP	dans
<NP>
cette	PRO:DEM	ce
section	NOM	section
,	PUN	,
</NP>
</PP>
<VN>
nous	PRO:PER	nous
allons	VER:pres	aller
</VN>
<VN>
esquisser	VER:infi	esquisser
</VN>
<NP>
la	DET:ART	le
démonstration	NOM	démonstration
</NP>
<PP>
de	PRP	de
<NP>
l'	DET:ART	le
existence	NOM	existence
</NP>
</PP>
<PP>
d'	PRP	de
<NP>
une	DET:ART	un
machine	NOM	machine
</NP>
</PP>
<PP>
de	PRP	de
<NP>
Turing	NAM	<unknown>
QUINE	ADV	quine
</NP>
</PP>
<NP>
qui	PRO:REL	qui
</NP>
<VN>
écrit	VER:pres	écrire
</VN>
<NP>
sa	DET:POS	son
propre	ADJ	propre
description	NOM	description
</NP>
.	SENT	.
</s>
<s>
<NP>
Une	DET:ART	un
machine	NOM	machine
</NP>
<PP>
de	PRP	de
<NP>
Turing	NAM	<unknown>
</NP>
</PP>
<VN>
est	VER:pres	être
</VN>
<NP>
un	DET:ART	un
modèle	NOM	modèle
</NP>
<PP>
de	PRP	de
<NP>
calcul	NOM	calcul
</NP>
</PP>
<AP>
abstrait	ADJ	abstrait
</AP>
.	SENT	.
</s>
<s>
<VN>
Elle	PRO:PER	elle
lit	VER:pres	lire
</VN>
<COORD>
et	KON	et
</COORD>
<VN>
écrit	VER:pres	écrire
</VN>
<NP>
des	PRP:det	du
caractères	NOM	caractère
</NP>
<PP>
sur	PRP	sur
<NP>
un	DET:ART	un
ruban	NOM	ruban
</NP>
</PP>
.	SENT	.
</s>
<s>
<PONCT:S>
Tout	ADV	tout
d'abord	ADV	d'abord
,	PUN	,
</PONCT:S>
<PP>
pour	PRP	pour
<NP>
tout	PRO:IND	tout
mot	NOM	mot
</NP>
</PP>
<AP>
w	NOM	<unknown>
,	PUN	,
</AP>
<VN>
on	PRO:PER	on
construit	VER:pres	construire
</VN>
<NP>
la	DET:ART	le
machine	NOM	machine
</NP>
<AP>
print	NOM	<unknown>
</AP>
<NP>
qui	PRO:REL	qui
</NP>
<VN>
ne	ADV	ne
tient	VER:pres	tenir
pas	ADV	pas
compte	NOM	compte
</VN>
<PP>
de	PRP	de
<NP>
son	DET:POS	son
entrée	NOM	entrée
,	PUN	,
</NP>
</PP>
<VN>
efface	VER:pres	effacer
</VN>
<NP>
son	DET:POS	son
ruban	NOM	ruban
</NP>
<COORD>
et	KON	et
</COORD>
<VN>
y	PRO:PER	y
écrit	VER:pres	écrire
</VN>
<NP>
le	DET:ART	le
mot	NOM	mot
</NP>
<AP>
w.	ADJ	<unknown>
</AP>
<PP>
Pour	PRP	pour
<NP>
toute	PRO:IND	tout
machine	NOM	machine
</NP>
</PP>
<AP>
M	ADJ	<unknown>
,	PUN	,
</AP>
<NP>
la	DET:ART	le
description	NOM	description
</NP>
<PP>
de	PRP	de
<NP>
M	NOM	<unknown>
</NP>
</PP>
<VN>
est	VER:pres	être
</VN>
<AP>
notée	VER:pper	noter
</AP>
<M>	
.	SENT	.
</s>
<s>
<PONCT:S>
Ensuite	ADV	ensuite
,	PUN	,
</PONCT:S>
<VN>
on	PRO:PER	on
considère	VER:pres	considérer
</VN>
<NP>
la	DET:ART	le
machine	NOM	machine
descrPrint	NOM	<unknown>
,	PUN	,
</NP>
<NP>
qui	PRO:REL	qui
,	PUN	,
</NP>
<PP>
pour	PRP	pour
<NP>
toute	PRO:IND	tout
entrée	NOM	entrée
</NP>
</PP>
<AP>
w	NOM	<unknown>
,	PUN	,
retourne	NOM	retourne
<print>	
,	PUN	,
</AP>
<NP>
la	DET:ART	le
description	NOM	description
</NP>
<PP>
de	PRP	de
<NP>
la	DET:ART	le
machine	NOM	machine
</NP>
</PP>
<PP>
de	PRP	de
<NP>
Turing	NAM	<unknown>
</NP>
</PP>
print	NOM	<unknown>
<PONCT:S>
Maintenant	ADV	maintenant
,	PUN	,
</PONCT:S>
<VN>
on	PRO:PER	on
construit	VER:pres	construire
QUINE	ADV	quine
:	PUN	:
</VN>
<Sint>
où	PRO:REL	où
</Sint>
<NP>
B	NAM	<unknown>
</NP>
<VN>
est	VER:pres	être
</VN>
<NP>
la	DET:ART	le
machine	NOM	machine
</NP>
<AP>
suivante	ADJ	suivant
:	PUN	:
</AP>
<VPpart>
En	PRO:PER	en
</VPpart>
<VN>
exécutant	VER:ppre	exécuter
</VN>
<COORD>
,	PUN	,
</COORD>
<NP>
QUINE(u)	NAM	<unknown>
,	PUN	,
</NP>
<NP>
l'	DET:ART	le
étape	NOM	étape
1	NUM	@card@
écrit	NOM	écrit
</NP>
<nowiki>	
<PP>
sur	PRP	sur
<NP>
le	DET:ART	le
ruban	NOM	ruban
</NP>
</PP>
.	SENT	.
</s>
<s>
<NP>
L'	DET:ART	le
étape	NOM	étape
2	NUM	@card@
</NP>
<AP>
lance	NOM	lance
</AP>
<NP>
B(	NAM	<unknown>
)	PUN	)
</NP>
.	SENT	.
</s>
<s>
<NP>
L'	DET:ART	le
étape	NOM	étape
</NP>
<VN>
2a	VER:simp	<unknown>
</VN>
<NP>
lance	NOM	lance
</NP>
<AP>
descrPrint()	ADJ	<unknown>
</AP>
<COORD>
et	KON	et
</COORD>
<VN>
écrit	VER:pres	écrire
</VN>
<AP>
<print</nowiki	NOM	<unknown>
»	PUN:cit	»
</AP>
<PP>
sur	PRP	sur
<NP>
le	DET:ART	le
ruban	NOM	ruban
</NP>
</PP>
.	SENT	.
</s>
<s>
<NP>
L'	DET:ART	le
étape	NOM	étape
2b	NOM	<unknown>
</NP>
<VN>
finit	VER:pres	finir
</VN>
<PP>
avec	PRP	avec
<printB>	
<PP>
sur	PRP	sur
</PP>
<NP>
le	DET:ART	le
ruban	NOM	ruban
</NP>
</PP>
.	SENT	.
</s>
<s>
<VN>
Il	PRO:PER	il
s'	PRO:PER	se
agit	VER:pres	agir
</VN>
<PP>
de	PRP	de
<NP>
la	DET:ART	le
description	NOM	description
</NP>
</PP>
<PP>
de	PRP	de
<NP>
QUINE	NOM	quine
</NP>
</PP>
.	SENT	.
</s>
<s>
<VN>
On	PRO:PER	on
démontre	VER:pres	démontrer
</VN>
<NP>
le	DET:ART	le
théorème	NOM	théorème
</NP>
<PP>
de	PRP	de
<NP>
récursion	NOM	<unknown>
</NP>
</PP>
<PP>
de	PRP	de
<NP>
Kleene	NAM	<unknown>
</NP>
</PP>
<VPpart>
en	PRP	en
</VPpart>
<VN>
remplaçant	VER:ppre	remplacer
</VN>
<NP>
l'	DET:ART	le
instruction	NOM	instruction
</NP>
<AP>
2b	NOM	<unknown>
par	PRP	par
</AP>
<MR>	
<NP>
où	PRO:REL	où
</NP>
<VN>
R	VER:subi	<unknown>
</VN>
<NP>
la	DET:ART	le
suite	NOM	suite
</NP>
<PP>
du	PRP:det	du
<NP>
programme	NOM	programme
</NP>
</PP>
.	SENT	.
</s>
<s>
<PONCT:S>
D'	PRP	de
autre	ADJ	autre
part	NOM	part
,	PUN	,
</PONCT:S>
<NP>
le	DET:ART	le
théorème	NOM	théorème
</NP>
<PP>
de	PRP	de
<NP>
récursion	NOM	<unknown>
</NP>
</PP>
<PP>
de	PRP	de
<NP>
Kleene	NAM	<unknown>
</NP>
</PP>
<VN>
implique	VER:pres	impliquer
</VN>
<NP>
l'	DET:ART	le
existence	NOM	existence
</NP>
<PP>
d'	PRP	de
<NP>
un	DET:ART	un
quine	NOM	quine
</NP>
</PP>
<PP>
pour	PRP	pour
<NP>
tout	PRO:IND	tout
langage	NOM	langage
</NP>
</PP>
<PP>
de	PRP	de
<NP>
programmation	NOM	programmation
Turing-complet	NAM	<unknown>
</NP>
</PP>
.	SENT	.
</s>
<s>
<NP>
Remarque	NOM	remarque
:	PUN	:
</NP>
<PP>
des	PRP:det	du
<NP>
sauts	NOM	saut
de	PRP	de
ligne	NOM	ligne
</NP>
</PP>
<COORD>
et	KON	et
</COORD>
<PP>
des	PRP:det	du
<NP>
espaces	NOM	espace
</NP>
</PP>
<VN>
ont	VER:pres	avoir
été	VER:pper	être
ajoutés	VER:pper	ajouter
</VN>
<VPinf>
pour	PRP	pour
</VPinf>
<VN>
faciliter	VER:infi	faciliter
</VN>
<NP>
la	DET:ART	le
lecture	NOM	lecture
</NP>
.	SENT	.
</s>
<s>
<NP>
10	ABR	@card@
C=	ABR	<unknown>
"	PUN:cit	"
:	PUN	:
</NP>
<NP>
PRINT	NOM	<unknown>
CHR(49)+CHR(48)+CHR(32)+CHR(67)+CHR(61)+CHR(34)+C+CHR(34)+C	NAM	<unknown>
"	PUN:cit	"
:	PUN	:
</NP>
<NP>
Remarque	NOM	remarque
:	PUN	:
</NP>
<VN>
il	PRO:PER	il
devrait	VER:cond	devoir
</VN>
<VN>
s'	PRO:PER	se
agir	VER:infi	agir
</VN>
<PP>
d'	PRP	de
<NP>
une	DET:ART	un
ligne	NOM	ligne
</NP>
</PP>
<PP>
de	PRP	de
<NP>
code	NOM	code
</NP>
</PP>
<AP>
continue	ADJ	continu
,	PUN	,
</AP>
<COORD>
mais	KON	mais
</COORD>
<PP>
des	PRP:det	du
<NP>
retours	NOM	retour
</NP>
</PP>
<PP>
à	PRP	à
<NP>
la	DET:ART	le
ligne	NOM	ligne
</NP>
</PP>
<VN>
ont	VER:pres	avoir
été	VER:pper	être
ajoutés	VER:pper	ajouter
</VN>
<VPinf>
pour	PRP	pour
"	PUN:cit	"
</VPinf>
<VN>
faciliter	VER:infi	faciliter
"	PUN:cit	"
</VN>
<NP>
la	DET:ART	le
lecture	NOM	lecture
</NP>
.	SENT	.
</s>
<s>
<NP>
Remarque	NOM	remarque
:	PUN	:
</NP>
<PP>
des	PRP:det	du
<NP>
sauts	NOM	saut
de	PRP	de
ligne	NOM	ligne
</NP>
</PP>
<VN>
ont	VER:pres	avoir
été	VER:pper	être
ajoutés	VER:pper	ajouter
</VN>
<VPinf>
pour	PRP	pour
</VPinf>
<VN>
faciliter	VER:infi	faciliter
</VN>
<NP>
la	DET:ART	le
lecture	NOM	lecture
</NP>
.	SENT	.
</s>
<s>
<NP>
Tout	PRO:IND	tout
ce	PRO:DEM	ce
</NP>
<NP>
qui	PRO:REL	qui
</NP>
<VN>
se	PRO:PER	se
trouve	VER:pres	trouver
</VN>
<PP>
en	PRP	en
<PP>
dessous	ADV	dessous
<PP>
de	PRP	de
<NP>
codice_1	NOM	<unknown>
</NP>
</PP>
</PP>
</PP>
<VN>
s'	PRO:PER	se
écrit	VER:pres	écrire
</VN>
<PP>
en	PRP	en
<NP>
une	DET:ART	un
seule	ADJ	seul
ligne	NOM	ligne
</NP>
</PP>
.	SENT	.
</s>
<s>
<NP>
Fonctionnement	NOM	fonctionnement
:	PUN	:
</NP>
<syntaxhighlight lang="rust">	
<NP>
fn	ADJ	<unknown>
main()	NOM	<unknown>
</NP>
<AP>
{	ADJ	<unknown>
</AP>
</s>
