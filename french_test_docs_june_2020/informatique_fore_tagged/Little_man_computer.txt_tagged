<s>
<NP>
Little	NAM	<unknown>
man	NOM	man
</NP>
<VN>
computer	VER:infi	computer
</VN>
<NP>
Le	DET:ART	le
Little	NAM	<unknown>
Man	NAM	Man
Computer	NOM	computer
(	PUN	(
</NP>
<NP>
LMC	NAM	<unknown>
)	PUN	)
</NP>
<VN>
est	VER:pres	être
</VN>
<NP>
un	DET:ART	un
ordinateur	NOM	ordinateur
</NP>
<PP>
à	PRP	à
<NP>
vocation	NOM	vocation
</NP>
</PP>
<AP>
éducative	ADJ	éducatif
,	PUN	,
</AP>
<VPpart>
créé	VER:pper	créer
</VPpart>
<PP>
par	PRP	par
<NP>
le	DET:ART	le
Dr	NAM	<unknown>
</NP>
</PP>
.	SENT	.
</s>
<s>
<NP>
Stuart	NAM	<unknown>
Madnick	NAM	<unknown>
</NP>
<PP>
en	PRP	en
<NP>
1965	NUM	@card@
</NP>
</PP>
.	SENT	.
</s>
<s>
<NP>
Le	DET:ART	le
LMC	NAM	<unknown>
</NP>
<VN>
est	VER:pres	être
généralement	ADV	généralement
utilisé	VER:pper	utiliser
</VN>
<VPinf>
pour	PRP	pour
</VPinf>
<VN>
enseigner	VER:infi	enseigner
</VN>
<PP>
aux	PRP:det	au
<NP>
étudiants	NOM	étudiant
,	PUN	,
</NP>
</PP>
<COORD>
car	KON	car
</COORD>
<VN>
il	PRO:PER	il
modélise	VER:pres	modéliser
</VN>
<NP>
un	DET:ART	un
ordinateur	NOM	ordinateur
</NP>
<AP>
simple	ADJ	simple
</AP>
<PP>
avec	PRP	avec
<NP>
une	DET:ART	un
architecture	NOM	architecture
</NP>
</PP>
<PP>
de	PRP	de
<NP>
von	NAM	von
Neumann	NAM	Neumann
-	PUN	-
</NP>
</PP>
<NP>
qui	PRO:REL	qui
</NP>
<VN>
possède	VER:pres	posséder
</VN>
<NP>
toutes	PRO:IND	tout
les	DET:ART	le
fonctionnalités	NOM	fonctionnalité
</NP>
<AP>
élémentaires	ADJ	élémentaire
</AP>
<PP>
d'	PRP	de
<NP>
un	DET:ART	un
ordinateur	NOM	ordinateur
</NP>
</PP>
<AP>
moderne	ADJ	moderne
</AP>
.	SENT	.
</s>
<s>
<VN>
Il	PRO:PER	il
peut	VER:pres	pouvoir
</VN>
<VPinf>
être	VER:infi	être
</VPinf>
<VPpart>
programmé	VER:pper	programmer
</VPpart>
<PP>
en	PRP	en
<NP>
code	NOM	code
machine	NOM	machine
(	PUN	(
</NP>
</PP>
<Ssub>
bien	ADV	bien
que	KON	que
</Ssub>
<PP>
sous	PRP	sous
<PP>
forme	NOM	forme
<AP>
décimale	ADJ	décimal
</AP>
</PP>
</PP>
<Ssub>
plutôt	ADV	plutôt
que	KON	que
</Ssub>
<NP>
binaire	ADJ	binaire
)	PUN	)
</NP>
<COORD>
ou	KON	ou
</COORD>
<PP>
en	PRP	en
<NP>
assembleur	NOM	assembleur
</NP>
</PP>
.	SENT	.
</s>
<s>
<NP>
Le	DET:ART	le
modèle	NOM	modèle
</NP>
<PP>
du	PRP:det	du
<NP>
LMC	NAM	<unknown>
est	VER:pres	être
</NP>
</PP>
<VPpart>
basé	VER:pper	baser
</VPpart>
<PP>
sur	PRP	sur
<NP>
le	DET:ART	le
concept	NOM	concept
</NP>
</PP>
<PP>
d'	PRP	de
<NP>
un	DET:ART	un
petit	ADJ	petit
homme	NOM	homme
</NP>
</PP>
<VPpart>
enfermé	VER:pper	enfermer
</VPpart>
<PP>
dans	PRP	dans
<NP>
<NP>
une	DET:ART	un
petite	ADJ	petit
pièce	NOM	pièce
</NP>
<COORD>
ou	KON	ou
</COORD>
<NP>
un	DET:ART	un
ordinateur	NOM	ordinateur
</NP>
</NP>
</PP>
.	SENT	.
</s>
<s>
<PP>
Au	PRP:det	au
<PP>
bout	NOM	bout
<PP>
de	PRP	de
<NP>
la	DET:ART	le
pièce	NOM	pièce
,	PUN	,
</NP>
</PP>
</PP>
</PP>
<PP>
il	PRO:PER	il
<PP>
y	PRO:PER	y
<PP>
a	VER:pres	avoir
<NP>
100	NUM	@card@
boîtes	NOM	boîte
</NP>
</PP>
</PP>
</PP>
<PP>
aux	PRP:det	au
<NP>
lettres	NOM	lettre
(	PUN	(
</NP>
</PP>
<NP>
la	DET:ART	le
mémoire	NOM	mémoire
)	PUN	)
,	PUN	,
</NP>
<VPpart>
numérotées	VER:pper	numéroter
</VPpart>
<PP>
de	PRP	de
<NP>
0	NUM	@card@
</NP>
</PP>
<PP>
à	PRP	à
<NP>
99	NUM	@card@
,	PUN	,
</NP>
</PP>
<NP>
qui	PRO:REL	qui
</NP>
<VN>
peuvent	VER:pres	pouvoir
</VN>
<NP>
chacune	PRO:IND	chacun
</NP>
<VN>
contenir	VER:infi	contenir
</VN>
<NP>
une	DET:ART	un
instruction	NOM	instruction
</NP>
<COORD>
ou	KON	ou
</COORD>
<VPpart>
donnée	VER:pper	donner
</VPpart>
<PP>
de	PRP	de
<NP>
3	NUM	@card@
chiffres	NOM	chiffre
(	PUN	(
</NP>
</PP>
<VN>
allant	VER:ppre	aller
ainsi	ADV	ainsi
</VN>
<PP>
de	PRP	de
<NP>
000	NUM	@card@
</NP>
</PP>
<PP>
à	PRP	à
<NP>
999	NUM	@card@
)	PUN	)
</NP>
</PP>
.	SENT	.
</s>
<s>
<PONCT:S>
De	PRP	de
plus	ADV	plus
,	PUN	,
</PONCT:S>
<PP>
il	PRO:PER	il
<PP>
y	PRO:PER	y
<PP>
a	VER:pres	avoir
<NP>
deux	NUM	deux
boîtes	NOM	boîte
</NP>
</PP>
</PP>
</PP>
<PP>
aux	PRP:det	au
<NP>
lettres	NOM	lettre
</NP>
</PP>
<PP>
à	PRP	à
<NP>
l'	DET:ART	le
autre	ADJ	autre
bout	NOM	bout
</NP>
</PP>
<VPpart>
marquées	VER:pper	marquer
</VPpart>
<NP>
INBOX	NOM	<unknown>
(	PUN	(
</NP>
<NP>
boîte	NOM	boîte
</NP>
<PP>
de	PRP	de
<NP>
<NP>
réception	NOM	réception
)	PUN	)
</NP>
<COORD>
et	KON	et
</COORD>
<NP>
OUTBOX	NAM	<unknown>
(	PUN	(
</NP>
</NP>
</PP>
<NP>
boîte	NOM	boîte
d'	PRP	de
envoi	NOM	envoi
)	PUN	)
</NP>
<NP>
qui	PRO:REL	qui
</NP>
<VN>
sont	VER:pres	être
</VN>
<VPpart>
utilisées	VER:pper	utiliser
</VPpart>
<VPinf>
pour	PRP	pour
</VPinf>
<VN>
recevoir	VER:infi	recevoir
</VN>
<COORD>
et	KON	et
</COORD>
<VN>
envoyer	VER:infi	envoyer
</VN>
<PP>
des	PRP:det	du
<NP>
données	NOM	donnée
</NP>
</PP>
.	SENT	.
</s>
<s>
<PP>
Au	PRP:det	au
<PP>
centre	NOM	centre
<PP>
de	PRP	de
<NP>
la	DET:ART	le
pièce	NOM	pièce
,	PUN	,
</NP>
</PP>
</PP>
</PP>
<PP>
il	PRO:PER	il
<PP>
y	PRO:PER	y
<PP>
a	VER:pres	avoir
<NP>
une	DET:ART	un
zone	NOM	zone
</NP>
</PP>
</PP>
</PP>
<PP>
de	PRP	de
<NP>
travail	NOM	travail
</NP>
</PP>
<VN>
contenant	VER:ppre	contenir
</VN>
<NP>
une	DET:ART	un
calculatrice	NOM	calculatrice
</NP>
<AP>
simple	ADJ	simple
</AP>
<PP>
à	PRP	à
<NP>
deux	NUM	deux
fonctions	NOM	fonction
(	PUN	(
</NP>
</PP>
<NP>
<NP>
addition	NOM	addition
</NP>
<COORD>
et	KON	et
</COORD>
<NP>
soustraction	NOM	soustraction
)	PUN	)
</NP>
</NP>
<NP>
<NP>
appelée	ADJ	appelé
Accumulateur	NOM	accumulateur
</NP>
<COORD>
et	KON	et
</COORD>
<NP>
un	DET:ART	un
compteur	NOM	compteur
</NP>
</NP>
<NP>
qu'	PRO:REL	que
</NP>
<VN>
il	PRO:PER	il
est	VER:pres	être
</VN>
<AP>
possible	ADJ	possible
</AP>
<VPinf>
de	PRP	de
</VPinf>
<VN>
remettre	VER:infi	remettre
à	PRP	à
zéro	NOM	zéro
appelé	VER:pper	appeler
</VN>
<NP>
Compteur	NOM	compteur
</NP>
<PP>
de	PRP	de
<NP>
Programme	NOM	programme
</NP>
</PP>
.	SENT	.
</s>
<s>
<NP>
Le	DET:ART	le
Compteur	NOM	compteur
</NP>
<PP>
de	PRP	de
<NP>
Programme	NOM	programme
</NP>
</PP>
<VN>
contient	VER:pres	contenir
</VN>
<NP>
l'	DET:ART	le
adresse	NOM	adresse
</NP>
<PP>
de	PRP	de
<NP>
la	DET:ART	le
prochaine	ADJ	prochain
instruction	NOM	instruction
</NP>
</PP>
<Ssub>
que	KON	que
</Ssub>
<NP>
le	DET:ART	le
Petit	NAM	Petit
Homme	NAM	Homme
</NP>
<VN>
va	VER:pres	aller
</VN>
<VN>
effectuer	VER:infi	effectuer
</VN>
.	SENT	.
</s>
<s>
<NP>
Le	DET:ART	le
Compteur	NOM	compteur
</NP>
<PP>
de	PRP	de
<NP>
Programme	NOM	programme
</NP>
</PP>
<VN>
est	VER:pres	être
normalement	ADV	normalement
incrémenté	VER:pper	incrémenter
</VN>
<PP>
de	PRP	de
<NP>
1	NUM	@card@
</NP>
</PP>
<PP>
après	PRP	après
<NP>
chaque	PRO:IND	chaque
instruction	NOM	instruction
</NP>
</PP>
<AP>
exécutée	VER:pper	exécuter
,	PUN	,
</AP>
<VN>
permettant	VER:ppre	permettre
</VN>
<PP>
au	PRP:det	au
<NP>
Petit	NAM	Petit
Homme	NAM	Homme
</NP>
</PP>
<VPinf>
d'	PRP	de
</VPinf>
<VN>
exécuter	VER:infi	exécuter
</VN>
<NP>
le	DET:ART	le
programme	NOM	programme
séquentiellement	ADV	séquentiellement
</NP>
.	SENT	.
</s>
<s>
<NP>
Les	DET:ART	le
instructions	NOM	instruction
</NP>
<PP>
de	PRP	de
<NP>
section	NOM	section
</NP>
</PP>
<VN>
permettent	VER:pres	permettre
</VN>
<PP>
aux	PRP:det	au
<NP>
itérations	NOM	itération
(	PUN	(
</NP>
</PP>
<NP>
<NP>
boucles	NOM	boucle
)	PUN	)
</NP>
<COORD>
et	KON	et
</COORD>
<NP>
structures	NOM	structure
</NP>
</NP>
<AP>
conditionnelles	ADJ	conditionnel
</AP>
<VPinf>
d'	PRP	de
</VPinf>
<VN>
être	VER:infi	être
</VN>
<AP>
incorporées	VER:pper	incorporer
</AP>
<PP>
dans	PRP	dans
<NP>
un	DET:ART	un
programme	NOM	programme
</NP>
</PP>
.	SENT	.
</s>
<s>
<NP>
La	DET:ART	le
dernière	ADJ	dernier
</NP>
<VPpart>
en	PRP	en
</VPpart>
<VN>
assignant	VER:ppre	assigner
</VN>
<PP>
au	PRP:det	au
<NP>
Compteur	NOM	compteur
</NP>
</PP>
<PP>
de	PRP	de
<NP>
Programme	NOM	programme
</NP>
</PP>
<NP>
une	DET:ART	un
adresse	NOM	adresse
de	PRP	de
mémoire	NOM	mémoire
</NP>
<AP>
non	ADV	non
séquentielle	ADJ	séquentiel
</AP>
<Ssub>
si	KON	si
</Ssub>
<NP>
une	DET:ART	un
condition	NOM	condition
</NP>
<AP>
particulière	ADJ	particulier
</AP>
<VN>
est	VER:pres	être
</VN>
<AP>
satisfaite	VER:pper	satisfaire
(	PUN	(
</AP>
<Ssub>
habituellement	ADV	habituellement
si	KON	si
</Ssub>
<NP>
la	DET:ART	le
valeur	NOM	valeur
</NP>
<VPpart>
mémorisée	VER:pper	mémoriser
</VPpart>
<PP>
dans	PRP	dans
<NP>
l'	DET:ART	le
accumulateur	NOM	accumulateur
</NP>
</PP>
<VN>
est	VER:pres	être
</VN>
<AP>
positive	ADJ	positif
</AP>
<COORD>
ou	KON	ou
</COORD>
<AP>
nulle	ADJ	nul
)	PUN	)
</AP>
.	SENT	.
</s>
<s>
<PP>
Comme	ADV	comme
<VN>
indiqué	VER:pper	indiquer
</VN>
<PP>
par	PRP	par
</PP>
<NP>
l'	DET:ART	le
architecture	NOM	architecture
</NP>
</PP>
<PP>
de	PRP	de
<NP>
von	NAM	von
Neumann	NAM	Neumann
,	PUN	,
</NP>
</PP>
<NP>
la	DET:ART	le
mémoire	NOM	mémoire
</NP>
<VN>
contient	VER:pres	contenir
à	PRP	à
la	DET:ART	le
fois	NOM	foi|fois
</VN>
<NP>
<NP>
les	DET:ART	le
instructions	NOM	instruction
</NP>
<COORD>
et	KON	et
</COORD>
<NP>
les	DET:ART	le
données	NOM	donnée
</NP>
</NP>
.	SENT	.
</s>
<s>
<VN>
Il	PRO:PER	il
est	VER:pres	être
par	PRP	par
conséquent	ADJ	conséquent
nécessaire	ADJ	nécessaire
</VN>
<VPinf>
de	PRP	de
</VPinf>
<VN>
faire	VER:infi	faire
</VN>
<NP>
attention	NOM	attention
</NP>
<VPinf>
à	PRP	à
bien	ADV	bien
</VPinf>
<VN>
empêcher	VER:infi	empêcher
</VN>
<NP>
le	DET:ART	le
Compteur	NOM	compteur
</NP>
<PP>
de	PRP	de
<NP>
Programme	NOM	programme
</NP>
</PP>
<VPinf>
d'	PRP	de
</VPinf>
<VN>
atteindre	VER:infi	atteindre
</VN>
<NP>
une	DET:ART	un
adresse	NOM	adresse
mémoire	NOM	mémoire
</NP>
<VN>
contenant	VER:ppre	contenir
</VN>
<NP>
des	PRP:det	du
données	NOM	donnée
</NP>
<AdP>
autrement	ADV	autrement
le	DET:ART	le
</AdP>
<NP>
Petit	NAM	Petit
Homme	NAM	Homme
</NP>
<VN>
tentera	VER:futu	tenter
</VN>
<VPinf>
de	PRP	de
</VPinf>
<VN>
la	PRO:PER	la
traiter	VER:infi	traiter
</VN>
<PP>
comme	ADV	comme
<NP>
une	DET:ART	un
instruction	NOM	instruction
</NP>
</PP>
.	SENT	.
</s>
<s>
<VPinf>
Afin	KON	afin
d'	PRP	de
</VPinf>
<VN>
utiliser	VER:infi	utiliser
</VN>
<NP>
le	DET:ART	le
LMC	NAM	<unknown>
</NP>
<NP>
l'	DET:ART	le
utilisateur	ADJ	utilisateur
charge	NOM	charge
</NP>
<PP>
des	PRP:det	du
<NP>
données	NOM	donnée
</NP>
</PP>
<PP>
dans	PRP	dans
<NP>
les	DET:ART	le
boîtes	NOM	boîte
</NP>
</PP>
<PP>
aux	PRP:det	au
<NP>
<NP>
lettres	NOM	lettre
</NP>
<COORD>
et	KON	et
</COORD>
<NP>
fait	VER:pres	faire
</NP>
</NP>
</PP>
<VN>
signe	NOM	signe
</VN>
<PP>
au	PRP:det	au
<NP>
Petit	NAM	Petit
Homme	NAM	Homme
</NP>
</PP>
<VPinf>
de	PRP	de
</VPinf>
<VN>
commencer	VER:infi	commencer
</VN>
<NP>
l'	DET:ART	le
exécution	NOM	exécution
,	PUN	,
</NP>
<VPpart>
en	PRO:PER	en
</VPpart>
<VN>
commençant	VER:ppre	commencer
</VN>
<PP>
par	PRP	par
<NP>
l'	DET:ART	le
instruction	NOM	instruction
</NP>
</PP>
<VPpart>
mémorisée	VER:pper	mémoriser
</VPpart>
<PP>
à	PRP	à
<NP>
l'	DET:ART	le
adresse	NOM	adresse
mémoire	NOM	mémoire
zéro	NOM	zéro
</NP>
</PP>
.	SENT	.
</s>
<s>
<VN>
Remettre	VER:infi	remettre
à	PRP	à
zéro	NOM	zéro
</VN>
<NP>
le	DET:ART	le
Compteur	NOM	compteur
</NP>
<PP>
de	PRP	de
<NP>
Programme	NOM	programme
</NP>
</PP>
<VN>
relance	VER:pres	relancer
</VN>
<NP>
le	DET:ART	le
programme	NOM	programme
</NP>
.	SENT	.
</s>
<s>
<VPinf>
Afin	KON	afin
d'	PRP	de
</VPinf>
<VN>
exécuter	VER:infi	exécuter
</VN>
<NP>
un	DET:ART	un
programme	NOM	programme
,	PUN	,
</NP>
<NP>
le	DET:ART	le
Petit	NAM	Petit
Homme	NAM	Homme
</NP>
<VN>
effectue	VER:pres	effectuer
</VN>
<NP>
ces	PRO:DEM	ce
étapes	NOM	étape
:	PUN	:
</NP>
<Ssub>
Même	ADV	même
si	KON	si
</Ssub>
<NP>
le	DET:ART	le
LMC	NAM	<unknown>
</NP>
<VN>
reflète	VER:pres	refléter
</VN>
<NP>
le	DET:ART	le
véritable	ADJ	véritable
fonctionnement	NOM	fonctionnement
</NP>
<PP>
des	PRP:det	du
<NP>
processeurs	NOM	processeur
</NP>
</PP>
<AP>
binaires	ADJ	binaire
,	PUN	,
</AP>
<NP>
la	DET:ART	le
simplicité	NOM	simplicité
</NP>
<PP>
des	PRP:det	du
<NP>
nombres	NOM	nombre
</NP>
</PP>
<AP>
décimaux	ADJ	décimal
</AP>
<VN>
a	VER:pres	avoir
été	VER:pper	être
choisie	VER:pper	choisir
</VN>
<VPinf>
afin	KON	afin
de	PRP	de
</VPinf>
<VN>
minimiser	VER:infi	minimiser
</VN>
<NP>
la	DET:ART	le
complexité	NOM	complexité
</NP>
<PP>
pour	PRP	pour
<NP>
les	DET:ART	le
étudiants	NOM	étudiant
</NP>
</PP>
<NP>
qui	PRO:REL	qui
</NP>
<VN>
ne	ADV	ne
seraient	VER:cond	être
pas	ADV	pas
habitués	VER:pper	habituer
</VN>
<VPinf>
à	PRP	à
</VPinf>
<VN>
travailler	VER:infi	travailler
</VN>
<PP>
en	PRP	en
<NP>
binaire	NOM	binaire
</NP>
</PP>
<COORD>
ou	KON	ou
</COORD>
<PP>
en	PRP	en
<NP>
hexadécimal	ADJ	<unknown>
</NP>
</PP>
.	SENT	.
</s>
<s>
<NP>
Certains	PRO:IND	certain
simulateurs	NOM	simulateur
</NP>
<PP>
de	PRP	de
<NP>
LMC	NAM	<unknown>
</NP>
</PP>
<VN>
sont	VER:pres	être
</VN>
<AP>
programmés	VER:pper	programmer
</AP>
<VPpart>
en	PRP	en
</VPpart>
<VN>
utilisant	VER:ppre	utiliser
directement	ADV	directement
</VN>
<NP>
les	DET:ART	le
instructions	NOM	instruction
</NP>
<AP>
numériques	ADJ	numérique
</AP>
<PP>
à	PRP	à
<NP>
<NP>
3	NUM	@card@
chiffres	NOM	chiffre
</NP>
<COORD>
et	KON	et
</COORD>
<NP>
d'	PRP	de
autres	ADJ	autre
</NP>
</NP>
</PP>
<VN>
utilisent	VER:pres	utiliser
</VN>
<NP>
des	PRP:det	du
codes	NOM	code
</NP>
<AP>
mnémoniques	ADJ	mnémonique
</AP>
<PP>
à	PRP	à
<NP>
<NP>
3	NUM	@card@
lettres	NOM	lettre
</NP>
<COORD>
et	KON	et
</COORD>
<NP>
étiquettes	NOM	étiquette
</NP>
</NP>
</PP>
.	SENT	.
</s>
<s>
<PP>
Dans	PRP	dans
<NP>
un	DET:ART	un
cas	NOM	cas
</NP>
</PP>
<PP>
comme	KON	comme
<PP>
dans	PRP	dans
</PP>
<NP>
l'	DET:ART	le
autre	ADJ	autre
,	PUN	,
</NP>
</PP>
<NP>
l'	DET:ART	le
ensemble	NOM	ensemble
</NP>
<PP>
des	PRP:det	du
<NP>
instructions	NOM	instruction
</NP>
</PP>
<VN>
est	VER:pres	être
délibérément	ADV	délibérément
</VN>
<AP>
très	ADV	très
limité	VER:pper	limiter
(	PUN	(
"	PUN:cit	"
</AP>
<PP>
avec	PRP	avec
<NP>
habituellement	ADV	habituellement
</NP>
</PP>
<PP>
environ	PRP	environ
<NP>
dix	NUM	dix
instructions	NOM	instruction
"	PUN:cit	"
)	PUN	)
</NP>
</PP>
<VPinf>
afin	KON	afin
de	PRP	de
</VPinf>
<VN>
simplifier	VER:infi	simplifier
</VN>
<NP>
la	DET:ART	le
compréhension	NOM	compréhension
</NP>
.	SENT	.
</s>
<s>
<Ssub>
Si	KON	si
</Ssub>
<NP>
le	DET:ART	le
LMC	NAM	<unknown>
</NP>
<VN>
utilise	VER:pres	utiliser
</VN>
<NP>
des	PRP:det	du
codes	NOM	code
</NP>
<AP>
mnémoniques	ADJ	mnémonique
</AP>
<COORD>
et	KON	et
</COORD>
<PP>
des	PRP:det	du
<NP>
étiquettes	NOM	étiquette
</NP>
</PP>
<Ssub>
alors	ADV	alors
</Ssub>
<VN>
ils	PRO:PER	il
sont	VER:pres	être
</VN>
<VPpart>
convertis	VER:pper	convertir
</VPpart>
<PP>
en	PRP	en
<NP>
instructions	NOM	instruction
</NP>
</PP>
<AP>
numériques	ADJ	numérique
</AP>
<PP>
à	PRP	à
<NP>
3	NUM	@card@
chiffres	NOM	chiffre
</NP>
</PP>
<Ssub>
quand	KON	quand
</Ssub>
<NP>
le	DET:ART	le
programme	NOM	programme
</NP>
<VN>
est	VER:pres	être
</VN>
<VPpart>
assemblé	VER:pper	assembler
</VPpart>
.	SENT	.
</s>
<s>
<NP>
Le	DET:ART	le
premier	NUM	premier
chiffre	NOM	chiffre
</NP>
<PP>
d'	PRP	de
<NP>
une	DET:ART	un
instruction	NOM	instruction
</NP>
</PP>
<AP>
numérique	ADJ	numérique
</AP>
<VN>
représente	VER:pres	représenter
</VN>
<NP>
la	DET:ART	le
commande	NOM	commande
</NP>
<VPinf>
à	PRP	à
</VPinf>
<VN>
effectuer	VER:infi	effectuer
</VN>
<COORD>
et	KON	et
</COORD>
<NP>
les	DET:ART	le
deux	NUM	deux
derniers	ADJ	dernier
chiffres	NOM	chiffre
</NP>
<VN>
représentent	VER:pres	représenter
</VN>
<NP>
l'	DET:ART	le
adresse	NOM	adresse
mémoire	NOM	mémoire
</NP>
<PP>
de	PRP	de
<NP>
la	DET:ART	le
boîte	NOM	boîte
</NP>
</PP>
<PP>
aux	PRP:det	au
<NP>
lettres	NOM	lettre
</NP>
</PP>
<VPpart>
concernée	VER:pper	concerner
</VPpart>
<PP>
par	PRP	par
<NP>
cette	PRO:DEM	ce
commande	NOM	commande
</NP>
</PP>
.	SENT	.
</s>
<s>
<NP>
Le	DET:ART	le
tableau	NOM	tableau
</NP>
<PP>
ci-dessous	ADV	ci-dessous
<VN>
montre	VER:pres	montrer
</VN>
</PP>
<NP>
un	DET:ART	un
ensemble	NOM	ensemble
</NP>
<PP>
d'	PRP	de
<NP>
instructions	NOM	instruction
</NP>
</PP>
<AP>
habituel	ADJ	habituel
</AP>
<COORD>
et	KON	et
</COORD>
<NP>
les	DET:ART	le
codes	NOM	code
</NP>
<AP>
mnémoniques	ADJ	mnémonique
</AP>
<AP>
correspondants	ADJ	correspondant
</AP>
.	SENT	.
</s>
<s>
<NP>
Ce	PRO:DEM	ce
programme	NOM	programme
(	PUN	(
</NP>
<NP>
instruction	NOM	instruction
901	NUM	@card@
</NP>
<PP>
jusqu'	PRP	jusque
<PP>
à	PRP	à
<NP>
000	NUM	@card@
)	PUN	)
est	VER:pres	être
</NP>
</PP>
</PP>
<VPpart>
écrit	VER:pper	écrire
uniquement	ADV	uniquement
</VPpart>
<VPpart>
en	PRP	en
</VPpart>
<VN>
utilisant	VER:ppre	utiliser
</VN>
<NP>
les	DET:ART	le
codes	NOM	code
</NP>
<AP>
numériques	ADJ	numérique
</AP>
.	SENT	.
</s>
<s>
<NP>
Le	DET:ART	le
programme	NOM	programme
</NP>
<VN>
prend	VER:pres	prendre
</VN>
<NP>
deux	NUM	deux
nombres	NOM	nombre
</NP>
<PP>
en	PRP	en
<NP>
entrée	NOM	entrée
</NP>
</PP>
<COORD>
et	KON	et
</COORD>
<VN>
retourne	VER:pres	retourner
</VN>
<NP>
la	DET:ART	le
différence	NOM	différence
</NP>
.	SENT	.
</s>
<s>
<VN>
Remarquons	VER:pres	remarquer
</VN>
<Ssub>
que	KON	que
</Ssub>
<NP>
l'	DET:ART	le
exécution	NOM	exécution
</NP>
<VN>
commence	VER:pres	commencer
</VN>
<PP>
à	PRP	à
<NP>
la	DET:ART	le
Boîte	NOM	boîte
</NP>
</PP>
<PP>
aux	PRP:det	au
<NP>
Lettres	NOM	lettre
</NP>
</PP>
<NP>
00	NUM	@card@
</NP>
<COORD>
et	KON	et
</COORD>
<VN>
finit	VER:simp	finir
</VN>
<PP>
à	PRP	à
<NP>
la	DET:ART	le
Boîte	NOM	boîte
</NP>
</PP>
<PP>
aux	PRP:det	au
<NP>
Lettres	NOM	lettre
07	NUM	@card@
</NP>
</PP>
.	SENT	.
</s>
<s>
<NP>
Les	DET:ART	le
inconvénients	NOM	inconvénient
</NP>
<VPinf>
de	PRP	de
</VPinf>
<VN>
programmer	VER:infi	programmer
</VN>
<NP>
le	DET:ART	le
LMC	NAM	<unknown>
</NP>
<VPpart>
en	PRP	en
</VPpart>
<VN>
utilisant	VER:ppre	utiliser
</VN>
<NP>
des	PRP:det	du
codes	NOM	code
d'	PRP	de
instructions	NOM	instruction
</NP>
<AP>
numériques	ADJ	numérique
</AP>
<VN>
sont	VER:pres	être
expliquées	VER:pper	expliquer
ci-dessous	ADV	ci-dessous
</VN>
.	SENT	.
</s>
<s>
<NP>
Le	DET:ART	le
langage	NOM	langage
d'	PRP	de
Assemblage	NOM	assemblage
</NP>
<VN>
est	VER:pres	être
</VN>
<NP>
un	DET:ART	un
langage	NOM	langage
</NP>
<PP>
de	PRP	de
<NP>
programmation	NOM	programmation
</NP>
</PP>
<PP>
de	PRP	de
<NP>
bas	ADJ	bas
niveau	NOM	niveau
</NP>
</PP>
<NP>
qui	PRO:REL	qui
</NP>
<VN>
utilise	VER:pres	utiliser
</VN>
<PP>
des	PRP:det	du
<NP>
mnémoniques	NOM	mnémonique
</NP>
</PP>
<COORD>
et	KON	et
</COORD>
<PP>
des	PRP:det	du
<NP>
labels	NOM	label
</NP>
</PP>
<PP>
au	PRP:det	au
<PP>
lieu	NOM	lieu
<PP>
de	PRP	de
<NP>
codes	NOM	code
</NP>
</PP>
</PP>
</PP>
<PP>
d'	PRP	de
<NP>
instruction	NOM	instruction
</NP>
</PP>
<AP>
numériques	ADJ	numérique
</AP>
.	SENT	.
</s>
<s>
<Ssub>
Même	ADV	même
si	KON	si
</Ssub>
<NP>
le	DET:ART	le
LMC	NAM	<unknown>
</NP>
<VN>
n'	ADV	ne
utilise	VER:pres	utiliser
qu'	KON	que
</VN>
<NP>
un	DET:ART	un
ensemble	NOM	ensemble
</NP>
<VPpart>
limité	VER:pper	limiter
</VPpart>
<PP>
de	PRP	de
<NP>
ces	PRO:DEM	ce
mnémoniques	NOM	mnémonique
,	PUN	,
</NP>
</PP>
<NP>
le	DET:ART	le
confort	NOM	confort
</NP>
<VPinf>
d'	PRP	de
</VPinf>
<VN>
utiliser	VER:infi	utiliser
</VN>
<NP>
une	DET:ART	un
mnémonique	NOM	mnémonique
</NP>
<PP>
pour	PRP	pour
<NP>
chaque	PRO:IND	chaque
instruction	NOM	instruction
</NP>
</PP>
<VN>
est	VER:pres	être
</VN>
<VPpart>
rendu	VER:pper	rendre
</VPpart>
<AP>
apparent	ADJ	apparent
</AP>
<PP>
par	PRP	par
<NP>
le	DET:ART	le
langage	NOM	langage
d'	PRP	de
assemblage	NOM	assemblage
</NP>
</PP>
<PP>
du	PRP:det	du
<NP>
même	ADJ	même
</NP>
</PP>
<VN>
programme	NOM	programme
montré	VER:pper	montrer
ci-dessous	ADV	ci-dessous
-	PUN	-
</VN>
<VN>
le	PRO:PER	le
programmer	VER:infi	programmer
</VN>
<VN>
n'	ADV	ne
a	VER:pres	avoir
plus	ADV	plus
</VN>
<NP>
besoin	NOM	besoin
</NP>
<VPinf>
de	PRP	de
</VPinf>
<VN>
mémoriser	VER:infi	mémoriser
</VN>
<NP>
un	DET:ART	un
ensemble	NOM	ensemble
</NP>
<PP>
de	PRP	de
<NP>
codes	NOM	code
</NP>
</PP>
<AP>
numériques	ADJ	numérique
</AP>
<AP>
anonymes	ADJ	anonyme
</AP>
<COORD>
et	KON	et
</COORD>
<VN>
peut	VER:pres	pouvoir
maintenant	ADV	maintenant
</VN>
<VN>
programmer	VER:infi	programmer
</VN>
<PP>
avec	PRP	avec
<NP>
un	DET:ART	un
ensemble	NOM	ensemble
</NP>
</PP>
<PP>
de	PRP	de
<NP>
codes	NOM	code
</NP>
</PP>
<AP>
mnémoniques	ADJ	mnémonique
</AP>
<AP>
plus	ADV	plus
facile	ADJ	facile
</AP>
<VPinf>
à	PRP	à
</VPinf>
<VN>
se	PRO:PER	se
souvenir	VER:infi	souvenir
</VN>
.	SENT	.
</s>
<s>
<Ssub>
Si	KON	si
</Ssub>
<NP>
la	DET:ART	le
mnémonique	NOM	mnémonique
</NP>
<VN>
est	VER:pres	être
</VN>
<NP>
une	DET:ART	un
instruction	NOM	instruction
</NP>
<NP>
qui	PRO:REL	qui
</NP>
<VN>
concerne	VER:pres	concerner
</VN>
<NP>
<NP>
une	DET:ART	un
adresse	NOM	adresse
mémoire	NOM	mémoire
(	PUN	(
"	PUN:cit	"
</NP>
<COORD>
soit	KON	soit
</COORD>
<NP>
une	DET:ART	un
instruction	NOM	instruction
</NP>
</NP>
<PP>
de	PRP	de
<NP>
<NP>
section	NOM	section
</NP>
<COORD>
ou	KON	ou
</COORD>
<NP>
un	DET:ART	un
chargement/enregistrement	NOM	<unknown>
</NP>
</NP>
</PP>
<PP>
de	PRP	de
<NP>
données	NOM	donnée
"	PUN:cit	"
)	PUN	)
</NP>
</PP>
<Ssub>
alors	ADV	alors
</Ssub>
<NP>
l'	DET:ART	le
étiquette	NOM	étiquette
</NP>
<VN>
est	VER:pres	être
utilisée	VER:pper	utiliser
</VN>
<VPinf>
afin	KON	afin
de	PRP	de
</VPinf>
<VN>
nommer	VER:infi	nommer
</VN>
<NP>
l'	DET:ART	le
adresse	NOM	adresse
mémoire	NOM	mémoire
</NP>
.	SENT	.
</s>
<s>
<PP>
Sans	PRP	sans
<NP>
les	DET:ART	le
étiquettes	NOM	étiquette
</NP>
</PP>
<NP>
le	DET:ART	le
programmeur	NOM	programmeur
</NP>
<VN>
devrait	VER:cond	devoir
manuellement	ADV	manuellement
</VN>
<VN>
calculer	VER:infi	calculer
</VN>
<NP>
les	DET:ART	le
adresses	NOM	adresse
</NP>
<PP>
des	PRP:det	du
<NP>
Boîtes	NOM	boîte
</NP>
</PP>
<PP>
aux	PRP:det	au
<NP>
Lettres	NOM	lettre
(	PUN	(
</NP>
</PP>
<NP>
mémoire	NOM	mémoire
)	PUN	)
</NP>
.	SENT	.
</s>
<s>
<PP>
Dans	PRP	dans
<NP>
le	DET:ART	le
code	NOM	code
</NP>
</PP>
<AP>
numérique	ADJ	numérique
d'	PRP	de
exemple	NOM	exemple
,	PUN	,
</AP>
<Ssub>
si	KON	si
</Ssub>
<PP>
de	PRP	de
<PP>
nouvelles	ADJ	nouveau
<NP>
instructions	NOM	instruction
</NP>
</PP>
</PP>
<VN>
devaient	VER:impf	devoir
</VN>
<VN>
être	VER:infi	être
insérées	VER:pper	insérer
</VN>
<PP>
avant	PRP	avant
<NP>
l'	DET:ART	le
instruction	NOM	instruction
</NP>
</PP>
<NP>
HLT	NAM	<unknown>
</NP>
finale	ADJ	final
<Ssub>
alors	ADV	alors
</Ssub>
<NP>
cette	PRO:DEM	ce
</NP>
<AP>
instruction	NOM	instruction
HLT	NAM	<unknown>
</AP>
<VN>
serait	VER:cond	être
</VN>
<VPpart>
déplacée	VER:pper	déplacer
</VPpart>
<PP>
depuis	PRP	depuis
<NP>
l'	DET:ART	le
adresse	NOM	adresse
07	NUM	@card@
</NP>
</PP>
<PP>
vers	PRP	vers
<NP>
l'	DET:ART	le
adresse	NOM	adresse
08	NUM	@card@
(	PUN	(
l’	ADJ	<unknown>
étiquetage	NOM	étiquetage
</NP>
</PP>
<PP>
des	PRP:det	du
<NP>
adresses	NOM	adresse
</NP>
</PP>
<VN>
commence	VER:pres	commencer
</VN>
<PP>
à	PRP	à
<NP>
la	DET:ART	le
position	NOM	position
00	NUM	@card@
)	PUN	)
</NP>
</PP>
.	SENT	.
</s>
<s>
<VN>
Supposons	VER:pres	supposer
</VN>
<Ssub>
que	KON	que
</Ssub>
<NP>
l'	DET:ART	le
utilisateur	NOM	utilisateur
</NP>
<VN>
a	VER:pres	avoir
entré	VER:pper	entrer
</VN>
<NP>
600	NUM	@card@
</NP>
<PP>
à	PRP	à
<NP>
la	DET:ART	le
première	NUM	premier
entrée	NOM	entrée
</NP>
</PP>
.	SENT	.
</s>
<s>
<NP>
L'	DET:ART	le
instruction	NOM	instruction
308	NUM	@card@
</NP>
<VN>
signifierait	VER:cond	signifier
</VN>
<Ssub>
que	KON	que
</Ssub>
<NP>
cette	PRO:DEM	ce
valeur	NOM	valeur
</NP>
<VN>
serait	VER:cond	être
</VN>
<VPpart>
stockée	VER:pper	stocker
</VPpart>
<PP>
à	PRP	à
<NP>
l'	DET:ART	le
adresse	NOM	adresse
</NP>
</PP>
<NP>
08	NUM	@card@
</NP>
<COORD>
et	KON	et
</COORD>
<VN>
effacerait	VER:cond	effacer
</VN>
<NP>
l'	DET:ART	le
instruction	NOM	instruction
000	NUM	@card@
(	PUN	(
</NP>
<NP>
HLT	NAM	<unknown>
)	PUN	)
</NP>
.	SENT	.
</s>
<s>
<VN>
Étant	VER:ppre	être
</VN>
<PP>
donné	VER:pper	donner
<PP>
que	KON	que
<NP>
600	NUM	@card@
</NP>
</PP>
</PP>
<VN>
signifie	VER:pres	signifier
"	PUN:cit	"
bifurque	VER:pres	bifurquer
</VN>
<PP>
vers	PRP	vers
<NP>
l'	DET:ART	le
adresse	NOM	adresse
</NP>
</PP>
<PP>
de	PRP	de
<NP>
boîte	NOM	boîte
</NP>
</PP>
<PP>
aux	PRP:det	au
<NP>
lettres	NOM	lettre
00	NUM	@card@
"	PUN:cit	"
</NP>
</PP>
<NP>
le	DET:ART	le
programme	NOM	programme
,	PUN	,
</NP>
<VPinf>
au	PRP:det	au
lieu	NOM	lieu
de	PRP	de
</VPinf>
<VN>
s'	PRO:PER	se
arrêter	VER:infi	arrêter
,	PUN	,
</VN>
<VN>
se	PRO:PER	se
bloquerait	VER:cond	bloquer
</VN>
<PP>
dans	PRP	dans
<NP>
une	DET:ART	un
boucle	NOM	boucle
</NP>
</PP>
<AP>
infinie	ADJ	infini
</AP>
.	SENT	.
</s>
<s>
<VPinf>
Afin	KON	afin
de	PRP	de
</VPinf>
<VN>
contourner	VER:infi	contourner
</VN>
<NP>
cette	PRO:DEM	ce
difficulté	NOM	difficulté
,	PUN	,
</NP>
<NP>
la	DET:ART	le
plupart	NOM	plupart
</NP>
<PP>
des	PRP:det	du
<NP>
langages	NOM	langage
d'	PRP	de
assemblages	NOM	assemblage
(	PUN	(
"	PUN:cit	"
</NP>
</PP>
<VPpart>
en	PRP	en
</VPpart>
<VN>
incluant	VER:ppre	inclure
</VN>
<NP>
celui	PRO:DEM	celui
</NP>
<PP>
du	PRP:det	du
<NP>
LMC	NAM	<unknown>
"	PUN:cit	"
)	PUN	)
</NP>
</PP>
<VN>
combinent	VER:pres	combiner
</VN>
<NP>
les	DET:ART	le
mnémoniques	NOM	mnémonique
</NP>
<PP>
avec	PRP	avec
<NP>
les	DET:ART	le
étiquettes	NOM	étiquette
</NP>
</PP>
.	SENT	.
</s>
<s>
<NP>
Une	DET:ART	un
étiquette	NOM	étiquette
</NP>
<VN>
est	VER:pres	être
simplement	ADV	simplement
</VN>
<NP>
un	DET:ART	un
mot	NOM	mot
</NP>
<NP>
qui	PRO:REL	qui
</NP>
<VN>
est	VER:pres	être
utilisé	VER:pper	utiliser
</VN>
<VPinf>
pour	PRP	pour
</VPinf>
<VN>
nommer	VER:infi	nommer
</VN>
<NP>
une	DET:ART	un
adresse	NOM	adresse
mémoire	NOM	mémoire
</NP>
<Srel>
où	PRO:REL	où
</Srel>
<NP>
une	DET:ART	un
instruction	NOM	instruction
</NP>
<COORD>
ou	KON	ou
</COORD>
<PP>
des	PRP:det	du
<NP>
données	NOM	donnée
</NP>
</PP>
<VN>
sont	VER:pres	être
</VN>
<AP>
stockées	VER:pper	stocker
,	PUN	,
</AP>
<COORD>
ou	KON	ou
</COORD>
<VPinf>
pour	PRP	pour
</VPinf>
<VN>
se	PRO:PER	se
référer	VER:infi	référer
</VN>
<PP>
à	PRP	à
<NP>
cette	PRO:DEM	ce
adresse	NOM	adresse
</NP>
</PP>
<PP>
dans	PRP	dans
<NP>
une	DET:ART	un
instruction	NOM	instruction
</NP>
</PP>
.	SENT	.
</s>
<s>
<Ssub>
Quand	KON	quand
</Ssub>
<NP>
un	DET:ART	un
programme	NOM	programme
</NP>
<VN>
est	VER:pres	être
assemblé	VER:pper	assembler
:	PUN	:
</VN>
<PP>
Dans	PRP	dans
<NP>
l'	DET:ART	le
exemple	NOM	exemple
</NP>
</PP>
<PP>
en	PRP	en
<NP>
langage	NOM	langage
</NP>
</PP>
<PP>
d'	PRP	de
<NP>
assemblage	NOM	assemblage
</NP>
</PP>
<NP>
qui	PRO:REL	qui
</NP>
<VN>
utilise	VER:pres	utiliser
</VN>
<PP>
des	PRP:det	du
<NP>
mnémoniques	NOM	mnémonique
</NP>
</PP>
<COORD>
et	KON	et
</COORD>
<PP>
des	PRP:det	du
<NP>
étiquettes	NOM	étiquette
,	PUN	,
</NP>
</PP>
<Ssub>
si	KON	si
</Ssub>
<NP>
une	DET:ART	un
nouvelle	ADJ	nouveau
instruction	NOM	instruction
</NP>
<VN>
est	VER:pres	être
</VN>
<VPpart>
insérées	VER:pper	insérer
</VPpart>
<PP>
avant	PRP	avant
<NP>
l'	DET:ART	le
instruction	NOM	instruction
</NP>
</PP>
<NP>
HLT	NAM	<unknown>
</NP>
finale	ADJ	final
<Ssub>
alors	ADV	alors
</Ssub>
<NP>
la	DET:ART	le
position	NOM	position
</NP>
<PP>
de	PRP	de
<NP>
l'	DET:ART	le
adresse	NOM	adresse
</NP>
</PP>
<VN>
est	VER:pres	être
</VN>
<VPpart>
étiquetée	VER:pper	étiqueter
</VPpart>
<AP>
TERME1	NOM	<unknown>
</AP>
<VN>
serait	VER:cond	être
maintenant	ADV	maintenant
</VN>
<PP>
à	PRP	à
<NP>
l'	DET:ART	le
emplacement	NOM	emplacement
mémoire	NOM	mémoire
</NP>
</PP>
<NP>
09	NUM	@card@
</NP>
<PP>
au	PRP:det	au
<PP>
lieu	NOM	lieu
<PP>
de	PRP	de
<NP>
<NP>
08	NUM	@card@
</NP>
<COORD>
et	KON	et
</COORD>
<NP>
l'	DET:ART	le
instruction	NOM	instruction
STA	NAM	<unknown>
TERME1	ABR	<unknown>
</NP>
</NP>
</PP>
</PP>
</PP>
<VN>
serait	VER:cond	être
convertie	VER:pper	convertir
</VN>
<PP>
en	PRP	en
<NP>
309	NUM	@card@
(	PUN	(
</NP>
</PP>
<NP>
STA	ABR	<unknown>
09	NUM	@card@
)	PUN	)
</NP>
<Ssub>
plutôt	ADV	plutôt
que	KON	que
</Ssub>
<NP>
308	NUM	@card@
(	PUN	(
</NP>
<NP>
STA	ABR	<unknown>
08	NUM	@card@
)	PUN	)
</NP>
<Ssub>
quand	KON	quand
</Ssub>
<NP>
le	DET:ART	le
programme	NOM	programme
</NP>
<VN>
est	VER:pres	être
</VN>
<VPpart>
assemblé	VER:pper	assembler
</VPpart>
.	SENT	.
</s>
<s>
<NP>
Les	DET:ART	le
étiquettes	NOM	étiquette
</NP>
<VN>
sont	VER:pres	être
ainsi	ADV	ainsi
utilisées	VER:pper	utiliser
</VN>
<PP>
pour	KON	pour
<PP>
:	PUN	:
<VN>
Exemple	NOM	exemple
</VN>
</PP>
</PP>
<NP>
Ce	PRO:DEM	ce
programme	NOM	programme
</NP>
<VN>
prend	VER:pres	prendre
</VN>
<NP>
une	DET:ART	un
entrée	NOM	entrée
</NP>
<AP>
utilisateur	ADJ	utilisateur
</AP>
<COORD>
et	KON	et
</COORD>
<VN>
décompte	VER:pres	décompter
jusqu'	PRP	jusque
à	PRP	à
zéro	NOM	zéro
</VN>
.	SENT	.
</s>
<s>
<NP>
Ce	PRO:DEM	ce
programme	NOM	programme
</NP>
<VN>
prend	VER:pres	prendre
</VN>
<NP>
une	DET:ART	un
entrée	NOM	entrée
</NP>
<AP>
utilisateur	ADJ	utilisateur
,	PUN	,
</AP>
<NP>
l'	DET:ART	le
élève	NOM	élève
</NP>
<PP>
au	PRP:det	au
<NP>
carré	NOM	carré
,	PUN	,
</NP>
</PP>
<VN>
retourne	VER:pres	retourner
</VN>
<NP>
la	DET:ART	le
réponse	NOM	réponse
</NP>
<COORD>
et	KON	et
</COORD>
<VN>
recommence	VER:pres	recommencer
</VN>
.	SENT	.
</s>
<s>
<VN>
Entrer	VER:infi	entrer
</VN>
<NP>
la	DET:ART	le
valeur	NOM	valeur
zéro	NOM	zéro
</NP>
<VN>
termine	VER:pres	terminer
</VN>
<NP>
le	DET:ART	le
programme	NOM	programme
</NP>
.	SENT	.
</s>
<s>
<NP>
"	PUN:cit	"
(	PUN	(
</NP>
<NP>
Note	NOM	note
:	PUN	:
</NP>
<NP>
une	DET:ART	un
entrée	NOM	entrée
</NP>
<NP>
qui	PRO:REL	qui
</NP>
<VN>
résulte	VER:pres	résulter
</VN>
<PP>
en	PRP	en
<NP>
une	DET:ART	un
sortie	NOM	sortie
</NP>
</PP>
<VPpart>
plus	ADV	plus
grande	ADJ	grand
</VPpart>
<NP>
999	ABR	@card@
</NP>
<VN>
causera	VER:futu	causer
</VN>
<NP>
une	DET:ART	un
erreur	NOM	erreur
</NP>
<VPpart>
due	VER:pper	devoir
</VPpart>
<PP>
à	PRP	à
<PP>
la	DET:ART	le
<PP>
limite	NOM	limite
<PP>
des	PRP:det	du
<NP>
nombres	NOM	nombre
</NP>
</PP>
</PP>
</PP>
</PP>
<PP>
de	PRP	de
<NP>
3	NUM	@card@
chiffres	NOM	chiffre
</NP>
</PP>
<PP>
du	PRP:det	du
<NP>
LMC	NAM	<unknown>
)	PUN	)
</NP>
</PP>
.	SENT	.
</s>
<s>
<PONCT:S>
"	PUN:cit	"
"	PUN:cit	"
</PONCT:S>
<NP>
Note	NOM	note
:	PUN	:
</NP>
<Ssub>
Si	KON	si
</Ssub>
<NP>
aucune	PRO:IND	aucun
valeur	NOM	valeur
</NP>
<VN>
n'	ADV	ne
est	VER:pres	être
donnée	VER:pper	donner
</VN>
<PP>
après	PRP	après
<NP>
une	DET:ART	un
déclaration	NOM	déclaration
</NP>
</PP>
<NP>
DAT	NAM	<unknown>
</NP>
<Ssub>
alors	ADV	alors
</Ssub>
<NP>
la	DET:ART	le
valeur	NOM	valeur
</NP>
<PP>
par	PRP	par
<NP>
défaut	NOM	défaut
0	NUM	@card@
</NP>
</PP>
<VN>
est	VER:pres	être
</VN>
<AP>
stockée	VER:pper	stocker
</AP>
<PP>
à	PRP	à
<NP>
l'	DET:ART	le
emplacement	NOM	emplacement
mémoire	NOM	mémoire
</NP>
</PP>
.	SENT	.
</s>
<s>
<PONCT:S>
"	PUN:cit	"
</PONCT:S>
<NP>
__FORCERSOMMAIRE__	NOM	<unknown>
</NP>
</s>
